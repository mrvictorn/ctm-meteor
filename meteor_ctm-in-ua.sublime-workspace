{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"margin",
				"margin-top"
			],
			[
				"fu",
				"function"
			],
			[
				"not",
				"notFound"
			],
			[
				"paddin",
				"padding-right"
			],
			[
				"min",
				"min-height"
			],
			[
				"paddi",
				"padding"
			],
			[
				"posit",
				"position"
			],
			[
				"di",
				"display"
			],
			[
				"m",
				"margin-top"
			],
			[
				"pa",
				"padding-bottom"
			],
			[
				"font",
				"font-size"
			],
			[
				"padding",
				"padding-top"
			],
			[
				"he",
				"height"
			],
			[
				"te",
				"text-align"
			],
			[
				"fo",
				"font-size"
			],
			[
				"fon",
				"font-size"
			],
			[
				"pos",
				"position"
			]
		]
	},
	"buffers":
	[
		{
			"file": "client/main.html",
			"settings":
			{
				"buffer_size": 578,
				"line_ending": "Windows"
			}
		},
		{
			"file": "client/layout.html",
			"settings":
			{
				"buffer_size": 1397,
				"line_ending": "Windows"
			}
		},
		{
			"file": "client/views/userlogin.html",
			"settings":
			{
				"buffer_size": 907,
				"line_ending": "Windows",
				"name": "<template name=\"user_loggedin\">"
			}
		},
		{
			"file": "client/views/userlogin.js",
			"settings":
			{
				"buffer_size": 733,
				"line_ending": "Windows",
				"name": "Template.user_loggedout.events({"
			}
		},
		{
			"file": "packages/accounts-ui-bootstrap-3/login_buttons.html",
			"settings":
			{
				"buffer_size": 3054,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 34 files for \"Template._loginButtons\"\n\nC:\\dev\\meteor\\ctm.in.ua\\packages\\accounts-ui-bootstrap-3\\.build\\browser\\packages\\accounts-ui-bootstrap-3.js:\n  303      function (options) {                                                                                         // 10\n  304        if (options.hash.align === \"left\")                                                                         // 11\n  305:         return new Handlebars.SafeString(Template._loginButtons({align: \"left\"}));                               // 12\n  306        else                                                                                                       // 13\n  307:         return new Handlebars.SafeString(Template._loginButtons({align: \"right\"}));                              // 14\n  308      });                                                                                                          // 15\n  309                                                                                                                   // 16\n  310    // shared between dropdown and single mode                                                                     // 17\n  311:   Template._loginButtons.events({                                                                                // 18\n  312      'click #login-buttons-logout': function() {                                                                  // 19\n  313        Meteor.logout(function () {                                                                                // 20\n  ...\n  317    });                                                                                                            // 24\n  318                                                                                                                   // 25\n  319:   Template._loginButtons.preserve({                                                                              // 26\n  320      'input[id]': Spark._labelFromIdOrName                                                                        // 27\n  321    });                                                                                                            // 28\n  ...\n  325    //                                                                                                             // 32\n  326                                                                                                                   // 33\n  327:   Template._loginButtonsLoggedOut.dropdown = function () {                                                       // 34\n  328      return Accounts._loginButtons.dropdown();                                                                    // 35\n  329    };                                                                                                             // 36\n  330                                                                                                                   // 37\n  331:   Template._loginButtonsLoggedOut.services = function () {                                                       // 38\n  332      return Accounts._loginButtons.getLoginServices();                                                            // 39\n  333    };                                                                                                             // 40\n  334                                                                                                                   // 41\n  335:   Template._loginButtonsLoggedOut.singleService = function () {                                                  // 42\n  336      var services = Accounts._loginButtons.getLoginServices();                                                    // 43\n  337      if (services.length !== 1)                                                                                   // 44\n  ...\n  341    };                                                                                                             // 48\n  342                                                                                                                   // 49\n  343:   Template._loginButtonsLoggedOut.configurationLoaded = function () {                                            // 50\n  344      return Accounts.loginServicesConfigured();                                                                   // 51\n  345    };                                                                                                             // 52\n  ...\n  352    // decide whether we should show a dropdown rather than a row of                                               // 59\n  353    // buttons                                                                                                     // 60\n  354:   Template._loginButtonsLoggedIn.dropdown = function () {                                                        // 61\n  355      return Accounts._loginButtons.dropdown();                                                                    // 62\n  356    };                                                                                                             // 63\n  357                                                                                                                   // 64\n  358:   Template._loginButtonsLoggedIn.displayName = function () {                                                     // 65\n  359      return Accounts._loginButtons.displayName();                                                                 // 66\n  360    };                                                                                                             // 67\n  ...\n  366    //                                                                                                             // 73\n  367                                                                                                                   // 74\n  368:   Template._loginButtonsMessages.errorMessage = function () {                                                    // 75\n  369      return loginButtonsSession.get('errorMessage');                                                              // 76\n  370    };                                                                                                             // 77\n  371                                                                                                                   // 78\n  372:   Template._loginButtonsMessages.infoMessage = function () {                                                     // 79\n  373      return loginButtonsSession.get('infoMessage');                                                               // 80\n  374    };                                                                                                             // 81\n  ...\n  378    //                                                                                                             // 85\n  379                                                                                                                   // 86\n  380:   Template._loginButtonsLoggingInPadding.dropdown = function () {                                                // 87\n  381      return Accounts._loginButtons.dropdown();                                                                    // 88\n  382    };                                                                                                             // 89\n  ...\n  484    var loginButtonsSession = Accounts._loginButtonsSession;                                                       // 3\n  485                                                                                                                   // 4\n  486:   Template._loginButtonsLoggedOutSingleLoginButton.events({                                                      // 5\n  487      'click .login-button': function () {                                                                         // 6\n  488        var serviceName = this.name;                                                                               // 7\n  ...\n  510    });                                                                                                            // 29\n  511                                                                                                                   // 30\n  512:   Template._loginButtonsLoggedOutSingleLoginButton.configured = function () {                                    // 31\n  513      return !!Accounts.loginServiceConfiguration.findOne({service: this.name});                                   // 32\n  514    };                                                                                                             // 33\n  515                                                                                                                   // 34\n  516:   Template._loginButtonsLoggedOutSingleLoginButton.capitalizedName = function () {                               // 35\n  517      if (this.name === 'github')                                                                                  // 36\n  518        // XXX we should allow service packages to set their capitalized name                                      // 37\n  ...\n  552    // events shared between loginButtonsLoggedOutDropdown and                                                     // 6\n  553    // loginButtonsLoggedInDropdown                                                                                // 7\n  554:   Template._loginButtons.events({                                                                                // 8\n  555      'click input, click label, click button, click .dropdown-menu, click .alert': function(event) {              // 9\n  556        event.stopPropagation();                                                                                   // 10\n  ...\n  571    //                                                                                                             // 25\n  572                                                                                                                   // 26\n  573:   Template._loginButtonsLoggedInDropdown.events({                                                                // 27\n  574      'click #login-buttons-open-change-password': function(event) {                                               // 28\n  575        event.stopPropagation();                                                                                   // 29\n  ...\n  581    });                                                                                                            // 35\n  582                                                                                                                   // 36\n  583:   Template._loginButtonsLoggedInDropdown.displayName = function () {                                             // 37\n  584      return Accounts._loginButtons.displayName();                                                                 // 38\n  585    };                                                                                                             // 39\n  586                                                                                                                   // 40\n  587:   Template._loginButtonsLoggedInDropdown.inChangePasswordFlow = function () {                                    // 41\n  588      return loginButtonsSession.get('inChangePasswordFlow');                                                      // 42\n  589    };                                                                                                             // 43\n  590                                                                                                                   // 44\n  591:   Template._loginButtonsLoggedInDropdown.inMessageOnlyFlow = function () {                                       // 45\n  592      return loginButtonsSession.get('inMessageOnlyFlow');                                                         // 46\n  593    };                                                                                                             // 47\n  594                                                                                                                   // 48\n  595:   Template._loginButtonsLoggedInDropdown.dropdownVisible = function () {                                         // 49\n  596      return loginButtonsSession.get('dropdownVisible');                                                           // 50\n  597    };                                                                                                             // 51\n  598                                                                                                                   // 52\n  599:   Template._loginButtonsLoggedInDropdownActions.allowChangingPassword = function () {                            // 53\n  600      // it would be more correct to check whether the user has a password set,                                    // 54\n  601      // but in order to do that we'd have to send more data down to the client,                                   // 55\n  ...\n  612    //                                                                                                             // 66\n  613                                                                                                                   // 67\n  614:   Template._loginButtonsLoggedOutDropdown.events({                                                               // 68\n  615      'click #login-buttons-password': function () {                                                               // 69\n  616        loginOrSignup();                                                                                           // 70\n  ...\n  705                                                                                                                   // 159\n  706    // additional classes that can be helpful in styling the dropdown                                              // 160\n  707:   Template._loginButtonsLoggedOutDropdown.additionalClasses = function () {                                      // 161\n  708      if (!Accounts.password) {                                                                                    // 162\n  709        return false;                                                                                              // 163\n  ...\n  719    };                                                                                                             // 173\n  720                                                                                                                   // 174\n  721:   Template._loginButtonsLoggedOutDropdown.dropdownVisible = function () {                                        // 175\n  722      return loginButtonsSession.get('dropdownVisible');                                                           // 176\n  723    };                                                                                                             // 177\n  724                                                                                                                   // 178\n  725:   Template._loginButtonsLoggedOutDropdown.hasPasswordService = function () {                                     // 179\n  726      return Accounts._loginButtons.hasPasswordService();                                                          // 180\n  727    };                                                                                                             // 181\n  728                                                                                                                   // 182\n  729:   Template._loginButtonsLoggedOutAllServices.services = function () {                                            // 183\n  730      return Accounts._loginButtons.getLoginServices();                                                            // 184\n  731    };                                                                                                             // 185\n  732                                                                                                                   // 186\n  733:   Template._loginButtonsLoggedOutAllServices.isPasswordService = function () {                                   // 187\n  734      return this.name === 'password';                                                                             // 188\n  735    };                                                                                                             // 189\n  736                                                                                                                   // 190\n  737:   Template._loginButtonsLoggedOutAllServices.hasOtherServices = function () {                                    // 191\n  738      return Accounts._loginButtons.getLoginServices().length > 1;                                                 // 192\n  739    };                                                                                                             // 193\n  740                                                                                                                   // 194\n  741:   Template._loginButtonsLoggedOutAllServices.hasPasswordService = function () {                                  // 195\n  742      return Accounts._loginButtons.hasPasswordService();                                                          // 196\n  743    };                                                                                                             // 197\n  744                                                                                                                   // 198\n  745:   Template._loginButtonsLoggedOutPasswordService.fields = function () {                                          // 199\n  746      var loginFields = [                                                                                          // 200\n  747        {fieldName: 'username-or-email', fieldLabel: 'Username or Email',                                          // 201\n  ...\n  801    };                                                                                                             // 255\n  802                                                                                                                   // 256\n  803:   Template._loginButtonsLoggedOutPasswordService.inForgotPasswordFlow = function () {                            // 257\n  804      return loginButtonsSession.get('inForgotPasswordFlow');                                                      // 258\n  805    };                                                                                                             // 259\n  806                                                                                                                   // 260\n  807:   Template._loginButtonsLoggedOutPasswordService.inLoginFlow = function () {                                     // 261\n  808      return !loginButtonsSession.get('inSignupFlow') && !loginButtonsSession.get('inForgotPasswordFlow');         // 262\n  809    };                                                                                                             // 263\n  810                                                                                                                   // 264\n  811:   Template._loginButtonsLoggedOutPasswordService.inSignupFlow = function () {                                    // 265\n  812      return loginButtonsSession.get('inSignupFlow');                                                              // 266\n  813    };                                                                                                             // 267\n  814                                                                                                                   // 268\n  815:   Template._loginButtonsLoggedOutPasswordService.showForgotPasswordLink = function () {                          // 269\n  816      return _.contains(                                                                                           // 270\n  817        [\"USERNAME_AND_EMAIL_CONFIRM\",\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"],          // 271\n  ...\n  819    };                                                                                                             // 273\n  820                                                                                                                   // 274\n  821:   Template._loginButtonsLoggedOutPasswordService.showCreateAccountLink = function() {                            // 275\n  822      return !Accounts._options.forbidClientAccountCreation;                                                       // 276\n  823    };                                                                                                             // 277\n  824                                                                                                                   // 278\n  825:   Template._loginButtonsFormField.inputType = function () {                                                      // 279\n  826      return this.inputType || \"text\";                                                                             // 280\n  827    };                                                                                                             // 281\n  ...\n  832    //                                                                                                             // 286\n  833                                                                                                                   // 287\n  834:   Template._loginButtonsChangePassword.events({                                                                  // 288\n  835      'keypress #login-old-password, keypress #login-password, keypress #login-password-again': function (event) { // 289\n  836        if (event.keyCode === 13)                                                                                  // 290\n  ...\n  843    });                                                                                                            // 297\n  844                                                                                                                   // 298\n  845:   Template._loginButtonsChangePassword.fields = function () {                                                    // 299\n  846      return [                                                                                                     // 300\n  847        {fieldName: 'old-password', fieldLabel: 'Current Password', inputType: 'password',                         // 301\n  ...\n 1203    //                                                                                                             // 148\n 1204                                                                                                                   // 149\n 1205:   Template._loginButtonsMessagesDialog.events({                                                                  // 150\n 1206      'click #messages-dialog-dismiss-button': function () {                                                       // 151\n 1207        loginButtonsSession.resetMessages();                                                                       // 152\n ....\n 1209    });                                                                                                            // 154\n 1210                                                                                                                   // 155\n 1211:   Template._loginButtonsMessagesDialog.visible = function () {                                                   // 156\n 1212      var hasMessage = loginButtonsSession.get('infoMessage') || loginButtonsSession.get('errorMessage');          // 157\n 1213      return !Accounts._loginButtons.dropdown() && hasMessage;                                                     // 158\n\nC:\\dev\\meteor\\ctm.in.ua\\packages\\accounts-ui-bootstrap-3\\.build\\browser\\packages\\accounts-ui-bootstrap-3.js.map:\n    1: {\"version\":3,\"file\":\"\\\\packages\\\\accounts-ui-bootstrap-3.js\",\"sources\":[\"accounts-ui-bootstrap-3/accounts_ui.js\",\"accounts-ui-bootstrap-3/login_buttons.html\",\"accounts-ui-bootstrap-3/login_buttons_single.html\",\"accounts-ui-bootstrap-3/login_buttons_dropdown.html\",\"accounts-ui-bootstrap-3/login_buttons_dialogs.html\",\"accounts-ui-bootstrap-3/login_buttons_session.js\",\"accounts-ui-bootstrap-3/login_buttons.js\",\"accounts-ui-bootstrap-3/login_buttons_single.js\",\"accounts-ui-bootstrap-3/login_buttons_dropdown.js\",\"accounts-ui-bootstrap-3/login_buttons_dialogs.js\"],\"names\":[],\"mappings\":\";;;;;;;;AAAA,iB;AACA,mB;;AAEA,4B;AACA,0B;AACA,0B;AACA,I;AACA,C;;;AAGA,wC;AACA,0B;AACA,kE;AACA,0C;AACA,qC;AACA,iE;AACA,K;;AAEA,qC;AACA,qC;AACA,oB;AACA,mC;AACA,2B;AACA,oC;AACA,sB;AACA,kB;AACA,uC;AACA,oD;AACA,+F;AACA,U;AACA,iF;AACA,Y;AACA,wH;AACA,K;AACA,G;;AAEA,mC;AACA,mC;AACA,kE;AACA,6D;AACA,4G;AACA,6C;AACA,+F;AACA,c;AACA,iE;AACA,O;AACA,O;AACA,G;AACA,E;;AAEA,iD;AACA,mE;AACA,E;;;;;;;;;;;;;;;;;;ACpDA,izB;AACA,2U;AACA,8yB;AACA,2W;AACA,8N;AACA,ia;;;;;;;;;;;;;;;;;;;ACLA,iyB;AACA,+M;AACA,sW;;;;;;;;;;;;;;;;;;;ACFA,itB;AACA,8X;AACA,8Z;AACA,ulB;AACA,oY;AACA,onC;AACA,iiB;AACA,8L;AACA,6S;AACA,8Y;;;;;;;;;;;;;;;;;;;ACTA,omD;AACA,+qC;AACA,yU;AACA,8mD;AACA,qY;;;;;;;;;;;;;;;;;;;ACJA,c;AACA,oB;AACA,sB;;AAEA,6E;AACA,mB;AACA,2B;AACA,2B;AACA,wB;;AAEA,mB;AACA,kB;;AAEA,6C;AACA,yB;AACA,yB;AACA,wB;;AAEA,yC;AACA,6C;AACA,6C;AACA,I;;AAEA,oC;AACA,qC;AACA,oE;AACA,I;;AAEA,0C;;AAEA,oF;AACA,mC;AACA,+B;AACA,uB;AACA,2D;AACA,yH;;AAEA,4B;AACA,M;;AAEA,gC;AACA,2C;AACA,M;;AAEA,wB;AACA,uB;AACA,2C;AACA,M;;AAEA,gC;AACA,sC;AACA,8C;AACA,8C;AACA,2C;AACA,yC;AACA,2B;AACA,M;;AAEA,oC;AACA,sC;AACA,wC;AACA,kC;AACA,M;;AAEA,qC;AACA,yC;AACA,qC;AACA,kC;AACA,M;;AAEA,qE;AACA,yC;AACA,8C;AACA,yC;AACA,sC;AACA,M;;AAEA,qE;AACA,+D;AACA,mC;AACA,M;AACA,sE;AACA,2D;AACA,sE;AACA,iB;AACA,uC;AACA,yC;AACA,0C;AACA,M;;AAEA,gC;AACA,sC;AACA,qC;AACA,M;;AAEA,uC;AACA,2D;AACA,+D;AACA,gE;AACA,K;AACA,I;AACA,M;;;;;;;;;;;;;;;;;;ACrGA,c;AACA,8B;AACA,gC;;AAEA,oB;AACA,0D;;AAEA,4B;AACA,mB;AACA,wB;AACA,wC;AACA,kF;AACA,U;AACA,mF;AACA,O;;AAEA,4C;AACA,iC;AACA,+C;AACA,iC;AACA,4C;AACA,S;AACA,K;AACA,K;;AAEA,mC;AACA,yC;AACA,K;;AAEA,I;AACA,kC;AACA,I;;AAEA,0D;AACA,6C;AACA,I;;AAEA,0D;AACA,qD;AACA,I;;AAEA,+D;AACA,6D;AACA,8B;AACA,sB;AACA,sF;AACA,uB;AACA,I;;AAEA,qE;AACA,8C;AACA,I;;;AAGA,I;AACA,kC;AACA,I;;AAEA,kE;AACA,Y;AACA,yD;AACA,6C;AACA,I;;AAEA,4D;AACA,gD;AACA,I;;;;AAIA,I;AACA,iC;AACA,I;;AAEA,6D;AACA,mD;AACA,I;;AAEA,4D;AACA,kD;AACA,I;;AAEA,I;AACA,0C;AACA,I;;AAEA,iE;AACA,6C;AACA,I;;AAEA,I;AACA,Y;AACA,I;;AAEA,oD;AACA,6B;AACA,c;AACA,gB;;AAEA,0C;AACA,+B;AACA,sB;AACA,2B;AACA,gE;AACA,oC;;AAEA,c;AACA,I;;AAEA,yD;AACA,qC;AACA,kF;;AAEA,iE;AACA,0D;AACA,qB;AACA,oB;;AAEA,sD;AACA,kC;AACA,gC;;AAEA,2C;AACA,0B;AACA,O;AACA,I;;AAEA,2D;AACA,0C;AACA,I;;AAEA,iD;AACA,sE;AACA,I;;AAEA,oE;AACA,I;AACA,iE;AACA,wB;AACA,iE;AACA,+B;AACA,kB;AACA,Y;AACA,sF;AACA,mB;AACA,K;AACA,I;AACA,2D;AACA,8F;AACA,kB;;AAEA,yK;;AAEA,yB;AACA,kB;AACA,Y;AACA,wD;AACA,mB;AACA,K;AACA,I;AACA,iE;AACA,+B;AACA,kB;AACA,Y;AACA,sF;AACA,mB;AACA,K;AACA,I;;AAEA,K;;;;;;;;;;;;;;;;;;;ACzKA,c;AACA,oB;AACA,0D;;AAEA,2D;AACA,wC;AACA,kC;AACA,0C;AACA,qC;AACA,mB;AACA,8C;AACA,iE;AACA,uB;AACA,yD;AACA,4D;AACA,gB;AACA,0E;AACA,S;AACA,Q;;AAEA,2E;;AAEA,6D;AACA,+D;AACA,0F;;AAEA,0C;AACA,K;AACA,K;;AAEA,6E;AACA,8E;AACA,I;;AAEA,kF;AACA,+B;AACA,2E;AACA,sB;AACA,Q;AACA,mC;AACA,I;;AAEA,gF;AACA,iC;AACA,yC;AACA,sD;AACA,I;AACA,M;;;;;;;;;;;;;;;;;;AC/CA,c;;AAEA,oB;AACA,0D;;AAEA,4D;AACA,iC;AACA,iC;AACA,mG;AACA,8B;AACA,M;AACA,sE;AACA,8B;AACA,uD;AACA,qB;AACA,M;AACA,uC;AACA,0C;AACA,K;AACA,K;;;AAGA,I;AACA,sD;AACA,I;;AAEA,iD;AACA,kE;AACA,8B;AACA,0C;AACA,4D;AACA,qB;AACA,uB;AACA,K;AACA,K;;AAEA,oE;AACA,gD;AACA,I;;AAEA,6E;AACA,2D;AACA,I;;AAEA,0E;AACA,wD;AACA,I;;AAEA,wE;AACA,sD;AACA,I;;AAEA,qF;AACA,6E;AACA,8E;AACA,oF;AACA,M;AACA,6E;AACA,6B;AACA,sF;AACA,I;;;AAGA,I;AACA,uD;AACA,I;;AAEA,kD;AACA,kD;AACA,sB;AACA,M;;AAEA,yD;AACA,+B;AACA,yB;AACA,M;;AAEA,8D;AACA,8B;AACA,uB;AACA,M;;AAEA,4C;AACA,8B;AACA,0C;;AAEA,mE;AACA,+D;AACA,yD;AACA,+E;AACA,4E;AACA,wD;;AAEA,oD;AACA,6D;;AAEA,gF;AACA,qB;;AAEA,oD;AACA,4B;AACA,mE;AACA,8B;AACA,6D;AACA,wC;AACA,gD;AACA,4E;AACA,U;AACA,uE;AACA,M;AACA,qD;AACA,8B;AACA,0C;;AAEA,mE;AACA,yD;AACA,+E;;AAEA,qD;AACA,4D;;AAEA,gF;AACA,qB;AACA,yB;;AAEA,oD;AACA,yB;AACA,uE;AACA,wC;AACA,gD;AACA,mF;AACA,M;AACA,8C;AACA,0C;;AAEA,+D;AACA,wD;AACA,+F;;AAEA,qD;AACA,6D;;AAEA,gF;AACA,qB;;AAEA,oD;AACA,mE;AACA,iD;AACA,6D;AACA,4E;AACA,6D;AACA,qF;AACA,M;AACA,sK;AACA,+B;AACA,wB;AACA,K;AACA,K;;AAEA,mE;AACA,2E;AACA,6B;AACA,mB;AACA,Y;AACA,oD;AACA,2C;AACA,mE;AACA,4C;AACA,c;AACA,oC;AACA,O;AACA,K;AACA,I;;AAEA,yE;AACA,sD;AACA,I;;AAEA,4E;AACA,uD;AACA,I;;AAEA,qE;AACA,qD;AACA,I;;AAEA,8E;AACA,oC;AACA,I;;AAEA,6E;AACA,gE;AACA,I;;AAEA,+E;AACA,uD;AACA,I;;AAEA,uE;AACA,uB;AACA,uE;AACA,6B;AACA,2B;AACA,+F;AACA,gD;AACA,U;AACA,qD;AACA,6B;AACA,wE;AACA,U;AACA,mE;AACA,6B;AACA,qE;AACA,U;AACA,4E;AACA,6B;AACA,qB;AACA,S;AACA,M;;AAEA,wB;AACA,qD;AACA,6B;AACA,2B;AACA,+G;AACA,gD;AACA,U;AACA,mE;AACA,6B;AACA,2B;AACA,6E;AACA,gD;AACA,U;AACA,8E;AACA,6B;AACA,sF;AACA,U;AACA,4E;AACA,6B;AACA,qB;AACA,U;AACA,mE;AACA,6B;AACA,6B;AACA,gE;AACA,qE;AACA,uC;AACA,2B;AACA,yF;AACA,gD;AACA,S;AACA,M;;AAEA,gF;AACA,I;;AAEA,qF;AACA,2D;AACA,I;;AAEA,4E;AACA,wG;AACA,I;;AAEA,6E;AACA,mD;AACA,I;;AAEA,uF;AACA,sB;AACA,uG;AACA,2C;AACA,I;;AAEA,qF;AACA,0D;AACA,I;;AAEA,2D;AACA,oC;AACA,I;;;AAGA,I;AACA,wC;AACA,I;;AAEA,+C;AACA,gH;AACA,+B;AACA,yB;AACA,M;AACA,iE;AACA,8B;AACA,uB;AACA,K;AACA,K;;AAEA,6D;AACA,Y;AACA,wF;AACA,6B;AACA,qB;AACA,U;AACA,gF;AACA,6B;AACA,qB;AACA,U;AACA,uE;AACA,6B;AACA,6B;AACA,gE;AACA,qE;AACA,uC;AACA,2B;AACA,4D;AACA,gD;AACA,S;AACA,M;AACA,I;;;AAGA,I;AACA,Y;AACA,I;;AAEA,uC;AACA,8C;AACA,iB;AACA,kB;AACA,Q;AACA,2B;AACA,I;;AAEA,8C;AACA,8C;AACA,iB;AACA,kB;AACA,Q;AACA,8D;AACA,I;;AAEA,mC;AACA,gD;AACA,e;AACA,Q;AACA,c;AACA,I;;AAEA,2B;AACA,wC;;AAEA,6D;AACA,uD;AACA,6E;AACA,0E;AACA,sD;;AAEA,sB;AACA,4B;AACA,6D;AACA,e;AACA,U;AACA,6C;AACA,gC;AACA,uD;AACA,e;AACA,U;AACA,uC;AACA,0C;AACA,wF;AACA,+D;AACA,oE;AACA,e;AACA,U;AACA,wC;AACA,Y;AACA,kF;AACA,K;;AAEA,gF;AACA,kB;AACA,0E;AACA,c;AACA,4C;AACA,O;AACA,O;AACA,I;;AAEA,mC;AACA,gE;AACA,I;;AAEA,4B;AACA,wC;;AAEA,4D;;AAEA,6D;AACA,4B;AACA,6D;AACA,e;AACA,U;AACA,oC;AACA,K;;AAEA,uD;AACA,yB;AACA,uD;AACA,e;AACA,U;AACA,8B;AACA,K;;AAEA,0E;AACA,sD;AACA,2D;AACA,a;AACA,Q;AACA,kC;;AAEA,uC;AACA,a;;AAEA,mD;AACA,kB;AACA,0E;AACA,c;AACA,4C;AACA,O;AACA,O;AACA,I;;AAEA,oC;AACA,wC;;AAEA,iE;AACA,oC;AACA,gE;AACA,kB;AACA,4E;AACA,Y;AACA,wD;AACA,S;AACA,Y;AACA,oD;AACA,K;AACA,I;;AAEA,oC;AACA,wC;;AAEA,0E;AACA,6D;;AAEA,0E;AACA,sD;AACA,2D;AACA,a;;AAEA,uC;AACA,a;;AAEA,qE;AACA,kB;AACA,2E;AACA,c;AACA,4D;;AAEA,8C;AACA,sC;AACA,8C;AACA,iB;AACA,O;AACA,O;AACA,I;;AAEA,iD;AACA,0E;AACA,iE;AACA,iC;AACA,4E;AACA,wD;AACA,uC;AACA,kE;AACA,qB;AACA,O;AACA,K;AACA,gB;AACA,I;AACA,M;;;;;;;;;;;;;;;;;;;AC1eA,c;AACA,oB;AACA,0D;;;AAGA,I;AACA,6D;AACA,sE;AACA,qE;AACA,gD;AACA,I;;AAEA,qC;AACA,gF;AACA,G;;AAEA,qC;AACA,gF;AACA,G;;AAEA,qE;AACA,qE;AACA,mE;AACA,8B;AACA,qC;AACA,wE;AACA,oC;AACA,mB;AACA,6D;AACA,oD;AACA,S;AACA,K;AACA,K;;;AAGA,I;AACA,iC;AACA,I;AACA,uD;AACA,qE;AACA,mB;AACA,G;;AAEA,wC;AACA,+D;AACA,sB;AACA,M;AACA,+D;AACA,+B;AACA,wB;AACA,M;AACA,+D;AACA,0D;AACA,kC;AACA,6D;AACA,K;AACA,K;;AAEA,mC;AACA,wC;AACA,mF;AACA,8D;AACA,a;;AAEA,2B;AACA,iE;AACA,wB;AACA,oB;AACA,4E;AACA,gB;AACA,8D;AACA,sC;AACA,iE;AACA,S;AACA,S;AACA,I;;AAEA,mE;AACA,yD;AACA,I;;;AAGA,I;AACA,iC;AACA,I;;AAEA,wC;AACA,+D;AACA,sB;AACA,M;AACA,2D;AACA,+B;AACA,wB;AACA,M;AACA,sE;AACA,0D;AACA,kC;AACA,2B;AACA,K;AACA,K;;AAEA,uD;AACA,iE;AACA,mB;AACA,I;;AAEA,mC;AACA,wC;AACA,4E;AACA,2D;AACA,a;;AAEA,2B;AACA,8D;AACA,wB;AACA,oB;AACA,4E;AACA,gB;AACA,8D;AACA,sC;AACA,+B;AACA,S;AACA,S;AACA,I;;AAEA,mE;AACA,yD;AACA,I;;;AAGA,I;AACA,qC;AACA,I;;AAEA,4C;AACA,wD;AACA,0D;AACA,K;AACA,K;;AAEA,2D;AACA,wD;AACA,I;;;AAGA,I;AACA,wC;AACA,I;;AAEA,+C;AACA,0D;AACA,0C;AACA,K;AACA,K;;AAEA,8D;AACA,uG;AACA,4D;AACA,I;;;AAGA,I;AACA,yC;AACA,I;;AAEA,gD;AACA,kE;AACA,2E;AACA,M;AACA,6E;AACA,0E;AACA,iF;AACA,oE;AACA,4F;AACA,6B;AACA,8B;AACA,U;AACA,uD;AACA,kE;AACA,qE;AACA,gD;AACA,W;;AAEA,uC;AACA,sF;AACA,oB;AACA,mF;AACA,c;AACA,iF;AACA,W;AACA,O;AACA,M;AACA,+E;AACA,+E;AACA,0E;AACA,4C;AACA,qE;AACA,uE;AACA,0E;AACA,6B;AACA,K;AACA,K;;AAEA,qE;AACA,+D;AACA,8D;AACA,wC;AACA,sE;AACA,qC;AACA,yE;AACA,O;;AAEA,sF;AACA,I;;AAEA,mE;AACA,wD;AACA,mE;AACA,wF;AACA,gF;AACA,I;;AAEA,yC;AACA,mE;AACA,6B;AACA,I;;AAEA,2E;AACA,iC;AACA,I;;AAEA,+D;AACA,yE;AACA,I;;AAEA,0E;AACA,uC;AACA,6D;AACA,I;;AAEA,oE;AACA,8E;AACA,I;;;AAGA,gF;AACA,iC;AACA,yC;AACA,sD;AACA,I;;AAEA,M\",\"sourcesContent\":[\"if (!Accounts.ui)\\r\\n  Accounts.ui = {};\\r\\n\\r\\nif (!Accounts.ui._options) {\\r\\n  Accounts.ui._options = {\\r\\n    requestPermissions: {}\\r\\n  };\\r\\n}\\r\\n\\r\\n\\r\\nAccounts.ui.config = function(options) {\\r\\n  // validate options keys\\r\\n  var VALID_KEYS = ['passwordSignupFields', 'requestPermissions'];\\r\\n  _.each(_.keys(options), function (key) {\\r\\n    if (!_.contains(VALID_KEYS, key))\\r\\n      throw new Error(\\\"Accounts.ui.config: Invalid key: \\\" + key);\\r\\n  });\\r\\n\\r\\n  // deal with `passwordSignupFields`\\r\\n  if (options.passwordSignupFields) {\\r\\n    if (_.contains([\\r\\n      \\\"USERNAME_AND_EMAIL_CONFIRM\\\",\\r\\n      \\\"USERNAME_AND_EMAIL\\\",\\r\\n      \\\"USERNAME_AND_OPTIONAL_EMAIL\\\",\\r\\n      \\\"USERNAME_ONLY\\\",\\r\\n      \\\"EMAIL_ONLY\\\"\\r\\n    ], options.passwordSignupFields)) {\\r\\n      if (Accounts.ui._options.passwordSignupFields)\\r\\n        throw new Error(\\\"Accounts.ui.config: Can't set `passwordSignupFields` more than once\\\");\\r\\n      else\\r\\n        Accounts.ui._options.passwordSignupFields = options.passwordSignupFields;\\r\\n    } else {\\r\\n      throw new Error(\\\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \\\" + options.passwordSignupFields);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // deal with `requestPermissions`\\r\\n  if (options.requestPermissions) {\\r\\n    _.each(options.requestPermissions, function (scope, service) {\\r\\n      if (Accounts.ui._options.requestPermissions[service]) {\\r\\n        throw new Error(\\\"Accounts.ui.config: Can't set `requestPermissions` more than once for \\\" + service);\\r\\n      } else if (!(scope instanceof Array)) {\\r\\n        throw new Error(\\\"Accounts.ui.config: Value for `requestPermissions` must be an array\\\");\\r\\n      } else {\\r\\n        Accounts.ui._options.requestPermissions[service] = scope;\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n};\\r\\n\\r\\nAccounts.ui._passwordSignupFields = function () {\\r\\n  return Accounts.ui._options.passwordSignupFields || \\\"EMAIL_ONLY\\\";\\r\\n};\",\"Template.__define__(\\\"_loginButtons\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<!--<div id=\\\\\\\"login-buttons\\\\\\\" class=\\\\\\\"login-buttons-dropdown-align-\\\",[\\\"{\\\",[[0,\\\"align\\\"]]],\\\"\\\\\\\">\\\\r\\\\n-->\\\\r\\\\n<ul id=\\\\\\\"login-buttons\\\\\\\" class=\\\\\\\"login-buttons-dropdown-align-\\\",[\\\"{\\\",[[0,\\\"align\\\"]]],\\\"\\\\\\\">\\\\r\\\\n  \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"currentUser\\\"]],[\\\"\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"loggingIn\\\"]],[\\\"\\\\r\\\\n      \\\",\\\"\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"dropdown\\\"]],[\\\"\\\\r\\\\n        \\\",[\\\">\\\",\\\"_loginButtonsLoggingIn\\\"],\\\"\\\\r\\\\n      \\\"],[\\\"\\\\r\\\\n        <div class=\\\\\\\"login-buttons-with-only-one-button\\\\\\\">\\\\r\\\\n          \\\",[\\\">\\\",\\\"_loginButtonsLoggingInSingleLoginButton\\\"],\\\"\\\\r\\\\n        </div>\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n    \\\"],[\\\"\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsLoggedIn\\\"],\\\"\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n  \\\"],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsLoggedOut\\\"],\\\"\\\\r\\\\n  \\\"]],\\\"\\\\r\\\\n<!--  </div>\\\\r\\\\n -->\\\\r\\\\n  </ul>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedIn\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"dropdown\\\"]],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsLoggedInDropdown\\\"],\\\"\\\\r\\\\n  \\\"],[\\\"\\\\r\\\\n    <div class=\\\\\\\"login-buttons-with-only-one-button\\\\\\\">\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsLoggedInSingleLogoutButton\\\"],\\\"\\\\r\\\\n    </div>\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsLoggedOut\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"services\\\"]],[\\\" \\\",\\\"\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"configurationLoaded\\\"]],[\\\"\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"dropdown\\\"]],[\\\" \\\",\\\"\\\\r\\\\n        \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutDropdown\\\"],\\\"\\\\r\\\\n      \\\"],[\\\"\\\\r\\\\n        \\\",[\\\"#\\\",[[0,\\\"with\\\"],[0,\\\"singleService\\\"]],[\\\" \\\",\\\"\\\\r\\\\n          <div class=\\\\\\\"login-buttons-with-only-one-button\\\\\\\">\\\\r\\\\n            \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"loggingIn\\\"]],[\\\"\\\\r\\\\n              \\\",[\\\">\\\",\\\"_loginButtonsLoggingInSingleLoginButton\\\"],\\\"\\\\r\\\\n            \\\"],[\\\"\\\\r\\\\n              \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutSingleLoginButton\\\"],\\\"\\\\r\\\\n            \\\"]],\\\"\\\\r\\\\n          </div>\\\\r\\\\n        \\\"]],\\\"\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n  \\\"],[\\\"\\\\r\\\\n    <div class=\\\\\\\"no-services\\\\\\\">No login services configured</div>\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsMessages\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"errorMessage\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"alert alert-danger\\\\\\\">\\\",[\\\"{\\\",[[0,\\\"errorMessage\\\"]]],\\\"</div>\\\\r\\\\n  \\\"]],\\\"\\\\r\\\\n  \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"infoMessage\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"alert alert-success no-margin\\\\\\\">\\\",[\\\"{\\\",[[0,\\\"infoMessage\\\"]]],\\\"</div>\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsLoggingIn\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\">\\\",\\\"_loginButtonsLoggingInPadding\\\"],\\\"\\\\r\\\\n  <div class=\\\\\\\"loading\\\\\\\">&nbsp;</div>\\\\r\\\\n  \\\",[\\\">\\\",\\\"_loginButtonsLoggingInPadding\\\"]]));\\nTemplate.__define__(\\\"_loginButtonsLoggingInPadding\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"unless\\\"],[0,\\\"dropdown\\\"]],[\\\"\\\\r\\\\n    \\\",\\\"\\\\r\\\\n    <div class=\\\\\\\"login-buttons-padding\\\\\\\">\\\\r\\\\n      <div class=\\\\\\\"login-button single-login-button\\\\\\\" style=\\\\\\\"visibility: hidden;\\\\\\\" id=\\\\\\\"login-buttons-logout\\\\\\\">&nbsp;</div>\\\\r\\\\n    </div>\\\\r\\\\n  \\\"],[\\\"\\\\r\\\\n    \\\",\\\"\\\\r\\\\n    <div class=\\\\\\\"login-buttons-padding\\\\\\\" />\\\\r\\\\n  \\\"]]]));\\n\",\"Template.__define__(\\\"_loginButtonsLoggedOutSingleLoginButton\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<div class=\\\\\\\"login-text-and-button\\\\\\\">\\\\r\\\\n    <div class=\\\\\\\"login-button single-login-button \\\",[\\\"#\\\",[[0,\\\"unless\\\"],[0,\\\"configured\\\"]],[\\\"configure-button\\\"]],\\\"\\\\\\\"\\\\r\\\\n         id=\\\\\\\"login-buttons-\\\",[\\\"{\\\",[[0,\\\"name\\\"]]],\\\"\\\\\\\">\\\\r\\\\n      <div class=\\\\\\\"login-image\\\\\\\" id=\\\\\\\"login-buttons-image-\\\",[\\\"{\\\",[[0,\\\"name\\\"]]],\\\"\\\\\\\"></div>\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"configured\\\"]],[\\\"\\\\r\\\\n        <span class=\\\\\\\"text-besides-image sign-in-text-\\\",[\\\"{\\\",[[0,\\\"name\\\"]]],\\\"\\\\\\\">Sign in with \\\",[\\\"{\\\",[[0,\\\"capitalizedName\\\"]]],\\\"</span>\\\\r\\\\n      \\\"],[\\\"\\\\r\\\\n        <span class=\\\\\\\"text-besides-image configure-text-\\\",[\\\"{\\\",[[0,\\\"name\\\"]]],\\\"\\\\\\\">Configure \\\",[\\\"{\\\",[[0,\\\"capitalizedName\\\"]]],\\\" Login</span>\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n    </div>\\\\r\\\\n  </div>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggingInSingleLoginButton\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<div class=\\\\\\\"login-text-and-button\\\\\\\">\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsLoggingIn\\\"],\\\"\\\\r\\\\n  </div>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedInSingleLogoutButton\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<div class=\\\\\\\"login-text-and-button\\\\\\\">\\\\r\\\\n    <div class=\\\\\\\"login-display-name\\\\\\\">\\\\r\\\\n      \\\",[\\\"{\\\",[[0,\\\"displayName\\\"]]],\\\"\\\\r\\\\n    </div>\\\\r\\\\n    <div class=\\\\\\\"login-button single-login-button\\\\\\\" id=\\\\\\\"login-buttons-logout\\\\\\\">Sign Out</div>\\\\r\\\\n  </div>\\\"]));\\n\",\"Template.__define__(\\\"_loginButtonsLoggedInDropdown\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<li id=\\\\\\\"login-dropdown-list\\\\\\\" class=\\\\\\\"dropdown\\\\\\\">\\\\r\\\\n    <a class=\\\\\\\"dropdown-toggle\\\\\\\" href=\\\\\\\"#\\\\\\\" data-toggle=\\\\\\\"dropdown\\\\\\\">\\\\r\\\\n      \\\",[\\\"{\\\",[[0,\\\"displayName\\\"]]],\\\"\\\\r\\\\n      <b class=\\\\\\\"caret\\\\\\\"></b>\\\\r\\\\n    </a>\\\\r\\\\n    <div class=\\\\\\\"dropdown-menu col-sm-3\\\\\\\">\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inMessageOnlyFlow\\\"]],[\\\"\\\\r\\\\n        \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n      \\\"],[\\\"\\\\r\\\\n        \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inChangePasswordFlow\\\"]],[\\\"\\\\r\\\\n          \\\",[\\\">\\\",\\\"_loginButtonsChangePassword\\\"],\\\"\\\\r\\\\n        \\\"],[\\\"\\\\r\\\\n          \\\",[\\\">\\\",\\\"_loginButtonsLoggedInDropdownActions\\\"],\\\"\\\\r\\\\n        \\\"]],\\\"\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n    </div>\\\\r\\\\n  </li>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedInDropdownActions\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"allowChangingPassword\\\"]],[\\\"\\\\r\\\\n    <button class=\\\\\\\"btn btn-default btn-block\\\\\\\" id=\\\\\\\"login-buttons-open-change-password\\\\\\\">Change password</button>\\\\r\\\\n  \\\"]],\\\"\\\\r\\\\n  <button class=\\\\\\\"btn btn-block btn-primary\\\\\\\" id=\\\\\\\"login-buttons-logout\\\\\\\">Sign out</button>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedOutDropdown\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<li id=\\\\\\\"login-dropdown-list\\\\\\\" class=\\\\\\\"dropdown\\\\\\\">\\\\r\\\\n    <a class=\\\\\\\"dropdown-toggle\\\\\\\" href=\\\\\\\"#\\\\\\\" data-toggle=\\\\\\\"dropdown\\\\\\\">\\\\r\\\\n      Sign In / Up\\\\r\\\\n      <b class=\\\\\\\"caret\\\\\\\"></b>\\\\r\\\\n    </a>\\\\r\\\\n    <div class=\\\\\\\"dropdown-menu\\\\\\\">\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutAllServices\\\"],\\\"\\\\r\\\\n    </div>\\\\r\\\\n  </li>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedOutAllServices\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"each\\\"],[0,\\\"services\\\"]],[\\\"\\\\r\\\\n  \\\",[\\\"#\\\",[[0,\\\"unless\\\"],[0,\\\"hasPasswordService\\\"]],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n  \\\"]],\\\"\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"isPasswordService\\\"]],[\\\"\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"hasOtherServices\\\"]],[\\\" \\\",\\\"\\\\r\\\\n        \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutPasswordServiceSeparator\\\"],\\\"\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutPasswordService\\\"],\\\"\\\\r\\\\n    \\\"],[\\\"\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutSingleLoginButton\\\"],\\\"\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsLoggedOutPasswordServiceSeparator\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<div class=\\\\\\\"or\\\\\\\">\\\\r\\\\n    <span class=\\\\\\\"hline\\\\\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\\\r\\\\n    <span class=\\\\\\\"or-text\\\\\\\">or</span>\\\\r\\\\n    <span class=\\\\\\\"hline\\\\\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\\\r\\\\n  </div>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedOutPasswordService\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inForgotPasswordFlow\\\"]],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_forgotPasswordForm\\\"],\\\"\\\\r\\\\n  \\\"],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"each\\\"],[0,\\\"fields\\\"]],[\\\"\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsFormField\\\"],\\\"\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n    <button class=\\\\\\\"btn btn-primary col-sm-12\\\\\\\" id=\\\\\\\"login-buttons-password\\\\\\\" type=\\\\\\\"button\\\\\\\">\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inSignupFlow\\\"]],[\\\"\\\\r\\\\n        Create\\\\r\\\\n      \\\"],[\\\"\\\\r\\\\n        Sign in\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n    </button>\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inLoginFlow\\\"]],[\\\"\\\\r\\\\n      <div id=\\\\\\\"login-other-options\\\\\\\">\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"showForgotPasswordLink\\\"]],[\\\"\\\\r\\\\n        <a id=\\\\\\\"forgot-password-link\\\\\\\" class=\\\\\\\"pull-left\\\\\\\" href=\\\\\\\"#\\\\\\\">Forgot password?</a>\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"showCreateAccountLink\\\"]],[\\\"\\\\r\\\\n        <a id=\\\\\\\"signup-link\\\\\\\" class=\\\\\\\"pull-right\\\\\\\" href=\\\\\\\"#\\\\\\\">Create account</a>\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n      </div>\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inSignupFlow\\\"]],[\\\"\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsBackToLoginLink\\\"],\\\"\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_forgotPasswordForm\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<div class=\\\\\\\"login-form\\\\\\\">\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n    <div id=\\\\\\\"forgot-password-email-label-and-input\\\\\\\"> \\\",\\\"\\\\r\\\\n      <input id=\\\\\\\"forgot-password-email\\\\\\\" type=\\\\\\\"email\\\\\\\" placeholder=\\\\\\\"E-mail\\\\\\\" class=\\\\\\\"form-control\\\\\\\" />\\\\r\\\\n    </div>\\\\r\\\\n    <button class=\\\\\\\"btn btn-primary login-button-form-submit col-sm-12\\\\\\\" id=\\\\\\\"login-buttons-forgot-password\\\\\\\">Reset password</button>\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsBackToLoginLink\\\"],\\\"\\\\r\\\\n  </div>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsBackToLoginLink\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<button id=\\\\\\\"back-to-login-link\\\\\\\" class=\\\\\\\"btn btn-default col-sm-12\\\\\\\">Cancel</button>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsFormField\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"visible\\\"]],[\\\"\\\\r\\\\n    <input id=\\\\\\\"login-\\\",[\\\"{\\\",[[0,\\\"fieldName\\\"]]],\\\"\\\\\\\" type=\\\\\\\"\\\",[\\\"{\\\",[[0,\\\"inputType\\\"]]],\\\"\\\\\\\" placeholder=\\\\\\\"\\\",[\\\"{\\\",[[0,\\\"fieldLabel\\\"]]],\\\"\\\\\\\" class=\\\\\\\"form-control\\\\\\\" />\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsChangePassword\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n  \\\",[\\\"#\\\",[[0,\\\"each\\\"],[0,\\\"fields\\\"]],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsFormField\\\"],\\\"\\\\r\\\\n  \\\"]],\\\"\\\\r\\\\n  <button class=\\\\\\\"btn btn-primary\\\\\\\" id=\\\\\\\"login-buttons-do-change-password\\\\\\\">Change password</button>\\\\r\\\\n  <button class=\\\\\\\"btn btn-default login-close\\\\\\\">Close</button>\\\"]));\\n\",\"Meteor.startup(function(){document.body.appendChild(Spark.render(Template.__define__(null,Package.handlebars.Handlebars.json_ast_to_func([[\\\">\\\",\\\"_resetPasswordDialog\\\"],\\\"\\\\r\\\\n  \\\",[\\\">\\\",\\\"_enrollAccountDialog\\\"],\\\"\\\\r\\\\n  \\\",[\\\">\\\",\\\"_justVerifiedEmailDialog\\\"],\\\"\\\\r\\\\n  \\\",[\\\">\\\",\\\"_configureLoginServiceDialog\\\"],\\\"\\\\r\\\\n\\\\r\\\\n  <!-- if we're not showing a dropdown, we need some other place to show messages -->\\\\r\\\\n  \\\",[\\\">\\\",\\\"_loginButtonsMessagesDialog\\\"]]))));});Template.__define__(\\\"_resetPasswordDialog\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inResetPasswordFlow\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"modal\\\\\\\" id=\\\\\\\"login-buttons-reset-password-modal\\\\\\\">\\\\r\\\\n      <div class=\\\\\\\"modal-dialog\\\\\\\">\\\\r\\\\n        <div class=\\\\\\\"modal-content\\\\\\\">\\\\r\\\\n          <div class=\\\\\\\"modal-header\\\\\\\">\\\\r\\\\n            <button type=\\\\\\\"button\\\\\\\" class=\\\\\\\"close\\\\\\\" data-dismiss=\\\\\\\"modal\\\\\\\" aria-hidden=\\\\\\\"true\\\\\\\">&times;</button>\\\\r\\\\n            <h4 class=\\\\\\\"modal-title\\\\\\\">Reset your password</h4>\\\\r\\\\n          </div>\\\\r\\\\n          <div class=\\\\\\\"modal-body\\\\\\\">\\\\r\\\\n            <input id=\\\\\\\"reset-password-new-password\\\\\\\" class=\\\\\\\"form-control\\\\\\\" type=\\\\\\\"password\\\\\\\" placeholder=\\\\\\\"New Password\\\\\\\"/>\\\\r\\\\n            \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n          </div>\\\\r\\\\n          <div class=\\\\\\\"modal-footer\\\\\\\">\\\\r\\\\n            <a class=\\\\\\\"btn btn-default\\\\\\\" id=\\\\\\\"login-buttons-cancel-reset-password\\\\\\\">Close</a>\\\\r\\\\n            <button class=\\\\\\\"btn btn-primary\\\\\\\" id=\\\\\\\"login-buttons-reset-password-button\\\\\\\">\\\\r\\\\n              Set password\\\\r\\\\n            </button>\\\\r\\\\n          </div>\\\\r\\\\n        </div><!-- /.modal-content -->\\\\r\\\\n      </div><!-- /.modal-dalog -->\\\\r\\\\n    </div><!-- /.modal -->\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_enrollAccountDialog\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inEnrollAccountFlow\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"modal\\\\\\\" id=\\\\\\\"login-buttons-enroll-account-modal\\\\\\\">\\\\r\\\\n      <div class=\\\\\\\"modal-dialog\\\\\\\">\\\\r\\\\n        <div class=\\\\\\\"modal-content\\\\\\\">\\\\r\\\\n          <div class=\\\\\\\"modal-header\\\\\\\">\\\\r\\\\n            <button type=\\\\\\\"button\\\\\\\" class=\\\\\\\"close\\\\\\\" data-dismiss=\\\\\\\"modal\\\\\\\" aria-hidden=\\\\\\\"true\\\\\\\">&times;</button>\\\\r\\\\n            <h4 class=\\\\\\\"modal-title\\\\\\\">Choose a password</h4>\\\\r\\\\n          </div>\\\\r\\\\n          <div class=\\\\\\\"modal-body\\\\\\\">\\\\r\\\\n            <input id=\\\\\\\"enroll-account-password\\\\\\\" class=\\\\\\\"form-control\\\\\\\" type=\\\\\\\"password\\\\\\\" placeholder=\\\\\\\"New Password\\\\\\\" />\\\\r\\\\n            \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n          </div>\\\\r\\\\n          <div class=\\\\\\\"modal-footer\\\\\\\">\\\\r\\\\n            <a class=\\\\\\\"btn btn-default\\\\\\\" id=\\\\\\\"login-buttons-cancel-enroll-account-button\\\\\\\">Close</a>\\\\r\\\\n            <button class=\\\\\\\"btn btn-primary\\\\\\\" id=\\\\\\\"login-buttons-enroll-account-button\\\\\\\">\\\\r\\\\n              Set password\\\\r\\\\n            </button>\\\\r\\\\n          </div>\\\\r\\\\n        </div><!-- /.modal-content -->\\\\r\\\\n      </div><!-- /.modal-dalog -->\\\\r\\\\n    </div><!-- /.modal -->\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_justVerifiedEmailDialog\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"visible\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"accounts-dialog accounts-centered-dialog\\\\\\\">\\\\r\\\\n      Email verified\\\\r\\\\n      <div class=\\\\\\\"login-button\\\\\\\" id=\\\\\\\"just-verified-dismiss-button\\\\\\\">Dismiss</div>\\\\r\\\\n    </div>\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_configureLoginServiceDialog\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"visible\\\"]],[\\\"\\\\r\\\\n    <div id=\\\\\\\"configure-login-service-dialog\\\\\\\" class=\\\\\\\"accounts-dialog accounts-centered-dialog\\\\\\\">\\\\r\\\\n      \\\",[\\\"!\\\",[[0,\\\"configurationSteps\\\"]]],\\\"\\\\r\\\\n      <p>\\\\r\\\\n        Now, copy over some details.\\\\r\\\\n      </p>\\\\r\\\\n      <p>\\\\r\\\\n        <table>\\\\r\\\\n          <colgroup>\\\\r\\\\n            <col span=\\\\\\\"1\\\\\\\" class=\\\\\\\"configuration_labels\\\\\\\">\\\\r\\\\n            <col span=\\\\\\\"1\\\\\\\" class=\\\\\\\"configuration_inputs\\\\\\\">\\\\r\\\\n          </colgroup>\\\\r\\\\n          \\\",[\\\"#\\\",[[0,\\\"each\\\"],[0,\\\"configurationFields\\\"]],[\\\"\\\\r\\\\n            <tr>\\\\r\\\\n              <td>\\\\r\\\\n                <label for=\\\\\\\"configure-login-service-dialog-\\\",[\\\"{\\\",[[0,\\\"property\\\"]]],\\\"\\\\\\\">\\\",[\\\"{\\\",[[0,\\\"label\\\"]]],\\\"</label>\\\\r\\\\n              </td>\\\\r\\\\n              <td>\\\\r\\\\n                <input id=\\\\\\\"configure-login-service-dialog-\\\",[\\\"{\\\",[[0,\\\"property\\\"]]],\\\"\\\\\\\" type=\\\\\\\"text\\\\\\\" />\\\\r\\\\n              </td>\\\\r\\\\n            </tr>\\\\r\\\\n          \\\"]],\\\"\\\\r\\\\n        </table>\\\\r\\\\n      </p>\\\\r\\\\n      <div class=\\\\\\\"new-section\\\\\\\">\\\\r\\\\n        <div class=\\\\\\\"login-button configure-login-service-dismiss-button\\\\\\\">\\\\r\\\\n          I'll do this later\\\\r\\\\n        </div>\\\\r\\\\n        <a class=\\\\\\\"accounts-close configure-login-service-dismiss-button\\\\\\\">&times;</a>\\\\r\\\\n\\\\r\\\\n        \\\",[\\\"#\\\",[[0,\\\"isolate\\\"]],[\\\"\\\\r\\\\n          <div class=\\\\\\\"login-button login-button-configure \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"saveDisabled\\\"]],[\\\"login-button-disabled\\\"]],\\\"\\\\\\\"\\\\r\\\\n             id=\\\\\\\"configure-login-service-dialog-save-configuration\\\\\\\">\\\\r\\\\n            Save Configuration\\\\r\\\\n          </div>\\\\r\\\\n        \\\"]],\\\"\\\\r\\\\n      </div>\\\\r\\\\n    </div>\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsMessagesDialog\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"visible\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"accounts-dialog accounts-centered-dialog\\\\\\\" id=\\\\\\\"login-buttons-message-dialog\\\\\\\">\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n      <div class=\\\\\\\"login-button\\\\\\\" id=\\\\\\\"messages-dialog-dismiss-button\\\\\\\">Dismiss</div>\\\\r\\\\n    </div>\\\\r\\\\n  \\\"]]]));\\n\",\"(function () {\\r\\n  var VALID_KEYS = [\\r\\n    'dropdownVisible',\\r\\n\\r\\n    // XXX consider replacing these with one key that has an enum for values.\\r\\n    'inSignupFlow',\\r\\n    'inForgotPasswordFlow',\\r\\n    'inChangePasswordFlow',\\r\\n    'inMessageOnlyFlow',\\r\\n\\r\\n    'errorMessage',\\r\\n    'infoMessage',\\r\\n\\r\\n    // dialogs with messages (info and error)\\r\\n    'resetPasswordToken',\\r\\n    'enrollAccountToken',\\r\\n    'justVerifiedEmail',\\r\\n\\r\\n    'configureLoginServiceDialogVisible',\\r\\n    'configureLoginServiceDialogServiceName',\\r\\n    'configureLoginServiceDialogSaveDisabled'\\r\\n  ];\\r\\n\\r\\n  var validateKey = function (key) {\\r\\n    if (!_.contains(VALID_KEYS, key))\\r\\n      throw new Error(\\\"Invalid key in loginButtonsSession: \\\" + key);\\r\\n  };\\r\\n\\r\\n  var KEY_PREFIX = \\\"Meteor.loginButtons.\\\";\\r\\n\\r\\n  // XXX we should have a better pattern for code private to a package like this one\\r\\n  Accounts._loginButtonsSession = {\\r\\n    set: function(key, value) {\\r\\n      validateKey(key);\\r\\n      if (_.contains(['errorMessage', 'infoMessage'], key))\\r\\n        throw new Error(\\\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\\\");\\r\\n\\r\\n      this._set(key, value);\\r\\n    },\\r\\n\\r\\n    _set: function(key, value) {\\r\\n      Session.set(KEY_PREFIX + key, value);\\r\\n    },\\r\\n\\r\\n    get: function(key) {\\r\\n      validateKey(key);\\r\\n      return Session.get(KEY_PREFIX + key);\\r\\n    },\\r\\n\\r\\n    closeDropdown: function () {\\r\\n      this.set('inSignupFlow', false);\\r\\n      this.set('inForgotPasswordFlow', false);\\r\\n      this.set('inChangePasswordFlow', false);\\r\\n      this.set('inMessageOnlyFlow', false);\\r\\n      this.set('dropdownVisible', false);\\r\\n      this.resetMessages();\\r\\n    },\\r\\n\\r\\n    infoMessage: function(message) {\\r\\n      this._set(\\\"errorMessage\\\", null);\\r\\n      this._set(\\\"infoMessage\\\", message);\\r\\n      this.ensureMessageVisible();\\r\\n    },\\r\\n\\r\\n    errorMessage: function(message) {\\r\\n      this._set(\\\"errorMessage\\\", message);\\r\\n      this._set(\\\"infoMessage\\\", null);\\r\\n      this.ensureMessageVisible();\\r\\n    },\\r\\n\\r\\n    // is there a visible dialog that shows messages (info and error)\\r\\n    isMessageDialogVisible: function () {\\r\\n      return this.get('resetPasswordToken') ||\\r\\n        this.get('enrollAccountToken') ||\\r\\n        this.get('justVerifiedEmail');\\r\\n    },\\r\\n\\r\\n    // ensure that somethings displaying a message (info or error) is\\r\\n    // visible.  if a dialog with messages is open, do nothing;\\r\\n    // otherwise open the dropdown.\\r\\n    //\\r\\n    // notably this doesn't matter when only displaying a single login\\r\\n    // button since then we have an explicit message dialog\\r\\n    // (_loginButtonsMessageDialog), and dropdownVisible is ignored in\\r\\n    // this case.\\r\\n    ensureMessageVisible: function () {\\r\\n      if (!this.isMessageDialogVisible())\\r\\n        this.set(\\\"dropdownVisible\\\", true);\\r\\n    },\\r\\n\\r\\n    resetMessages: function () {\\r\\n      this._set(\\\"errorMessage\\\", null);\\r\\n      this._set(\\\"infoMessage\\\", null);\\r\\n    },\\r\\n\\r\\n    configureService: function (name) {\\r\\n      this.set('configureLoginServiceDialogVisible', true);\\r\\n      this.set('configureLoginServiceDialogServiceName', name);\\r\\n      this.set('configureLoginServiceDialogSaveDisabled', true);\\r\\n    }\\r\\n  };\\r\\n}) ();\",\"(function () {\\r\\n  if (!Accounts._loginButtons)\\r\\n    Accounts._loginButtons = {};\\r\\n\\r\\n  // for convenience\\r\\n  var loginButtonsSession = Accounts._loginButtonsSession;\\r\\n\\r\\n  Handlebars.registerHelper(\\r\\n    \\\"loginButtons\\\",\\r\\n    function (options) {\\r\\n      if (options.hash.align === \\\"left\\\")\\r\\n        return new Handlebars.SafeString(Template._loginButtons({align: \\\"left\\\"}));\\r\\n      else\\r\\n        return new Handlebars.SafeString(Template._loginButtons({align: \\\"right\\\"}));\\r\\n    });\\r\\n\\r\\n  // shared between dropdown and single mode\\r\\n  Template._loginButtons.events({\\r\\n    'click #login-buttons-logout': function() {\\r\\n      Meteor.logout(function () {\\r\\n        loginButtonsSession.closeDropdown();\\r\\n      });\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._loginButtons.preserve({\\r\\n    'input[id]': Spark._labelFromIdOrName\\r\\n  });\\r\\n\\r\\n  //\\r\\n  // loginButtonLoggedOut template\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsLoggedOut.dropdown = function () {\\r\\n    return Accounts._loginButtons.dropdown();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOut.services = function () {\\r\\n    return Accounts._loginButtons.getLoginServices();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOut.singleService = function () {\\r\\n    var services = Accounts._loginButtons.getLoginServices();\\r\\n    if (services.length !== 1)\\r\\n      throw new Error(\\r\\n        \\\"Shouldn't be rendering this template with more than one configured service\\\");\\r\\n    return services[0];\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOut.configurationLoaded = function () {\\r\\n    return Accounts.loginServicesConfigured();\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsLoggedIn template\\r\\n  //\\r\\n\\r\\n  // decide whether we should show a dropdown rather than a row of\\r\\n  // buttons\\r\\n  Template._loginButtonsLoggedIn.dropdown = function () {\\r\\n    return Accounts._loginButtons.dropdown();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedIn.displayName = function () {\\r\\n    return Accounts._loginButtons.displayName();\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsMessage template\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsMessages.errorMessage = function () {\\r\\n    return loginButtonsSession.get('errorMessage');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsMessages.infoMessage = function () {\\r\\n    return loginButtonsSession.get('infoMessage');\\r\\n  };\\r\\n\\r\\n  //\\r\\n  // loginButtonsLoggingInPadding template\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsLoggingInPadding.dropdown = function () {\\r\\n    return Accounts._loginButtons.dropdown();\\r\\n  };\\r\\n\\r\\n  //\\r\\n  // helpers\\r\\n  //\\r\\n\\r\\n  Accounts._loginButtons.displayName = function () {\\r\\n    var user = Meteor.user();\\r\\n    if (!user)\\r\\n      return '';\\r\\n\\r\\n    if (user.profile && user.profile.name)\\r\\n      return user.profile.name;\\r\\n    if (user.username)\\r\\n      return user.username;\\r\\n    if (user.emails && user.emails[0] && user.emails[0].address)\\r\\n      return user.emails[0].address;\\r\\n\\r\\n    return '';\\r\\n  };\\r\\n\\r\\n  Accounts._loginButtons.getLoginServices = function () {\\r\\n    // First look for OAuth services.\\r\\n    var services = Package['accounts-oauth'] ? Accounts.oauth.serviceNames() : [];\\r\\n\\r\\n    // Be equally kind to all login services. This also preserves\\r\\n    // backwards-compatibility. (But maybe order should be\\r\\n    // configurable?)\\r\\n    services.sort();\\r\\n\\r\\n    // Add password, if it's there; it must come last.\\r\\n    if (this.hasPasswordService())\\r\\n      services.push('password');\\r\\n\\r\\n    return _.map(services, function(name) {\\r\\n      return {name: name};\\r\\n    });\\r\\n  };\\r\\n\\r\\n  Accounts._loginButtons.hasPasswordService = function () {\\r\\n    return !!Package['accounts-password'];\\r\\n  };\\r\\n\\r\\n  Accounts._loginButtons.dropdown = function () {\\r\\n    return this.hasPasswordService() || getLoginServices().length > 1;\\r\\n  };\\r\\n\\r\\n  // XXX improve these. should this be in accounts-password instead?\\r\\n  //\\r\\n  // XXX these will become configurable, and will be validated on\\r\\n  // the server as well.\\r\\n  Accounts._loginButtons.validateUsername = function (username) {\\r\\n    if (username.length >= 3) {\\r\\n      return true;\\r\\n    } else {\\r\\n      loginButtonsSession.errorMessage(\\\"Username must be at least 3 characters long\\\");\\r\\n      return false;\\r\\n    }\\r\\n  };\\r\\n  Accounts._loginButtons.validateEmail = function (email) {\\r\\n    if (Accounts.ui._passwordSignupFields() === \\\"USERNAME_AND_OPTIONAL_EMAIL\\\" && email === '')\\r\\n      return true;\\r\\n\\r\\n    var re = /^(([^<>()[\\\\]\\\\\\\\.,;:\\\\s@\\\\\\\"]+(\\\\.[^<>()[\\\\]\\\\\\\\.,;:\\\\s@\\\\\\\"]+)*)|(\\\\\\\".+\\\\\\\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$/;\\r\\n\\r\\n    if (re.test(email)) {\\r\\n      return true;\\r\\n    } else {\\r\\n      loginButtonsSession.errorMessage(\\\"Invalid email\\\");\\r\\n      return false;\\r\\n    }\\r\\n  };\\r\\n  Accounts._loginButtons.validatePassword = function (password) {\\r\\n    if (password.length >= 6) {\\r\\n      return true;\\r\\n    } else {\\r\\n      loginButtonsSession.errorMessage(\\\"Password must be at least 6 characters long\\\");\\r\\n      return false;\\r\\n    }\\r\\n  };\\r\\n\\r\\n})();\\r\\n\",\"(function () {\\r\\n  // for convenience\\r\\n  var loginButtonsSession = Accounts._loginButtonsSession;\\r\\n\\r\\n  Template._loginButtonsLoggedOutSingleLoginButton.events({\\r\\n    'click .login-button': function () {\\r\\n      var serviceName = this.name;\\r\\n      loginButtonsSession.resetMessages();\\r\\n      var callback = function (err) {\\r\\n        if (!err) {\\r\\n          loginButtonsSession.closeDropdown();\\r\\n        } else if (err instanceof Accounts.LoginCancelledError) {\\r\\n          // do nothing\\r\\n        } else if (err instanceof Accounts.ConfigError) {\\r\\n          loginButtonsSession.configureService(serviceName);\\r\\n        } else {\\r\\n          loginButtonsSession.errorMessage(err.reason || \\\"Unknown error\\\");\\r\\n        }\\r\\n      };\\r\\n\\r\\n      var loginWithService = Meteor[\\\"loginWith\\\" + capitalize(serviceName)];\\r\\n\\r\\n      var options = {}; // use default scope unless specified\\r\\n      if (Accounts.ui._options.requestPermissions[serviceName])\\r\\n        options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\\r\\n\\r\\n      loginWithService(options, callback);\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._loginButtonsLoggedOutSingleLoginButton.configured = function () {\\r\\n    return !!Accounts.loginServiceConfiguration.findOne({service: this.name});\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutSingleLoginButton.capitalizedName = function () {\\r\\n    if (this.name === 'github')\\r\\n      // XXX we should allow service packages to set their capitalized name\\r\\n      return 'GitHub';\\r\\n    else\\r\\n      return capitalize(this.name);\\r\\n  };\\r\\n\\r\\n  // XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\\r\\n  var capitalize = function(str){\\r\\n    str = str == null ? '' : String(str);\\r\\n    return str.charAt(0).toUpperCase() + str.slice(1);\\r\\n  };\\r\\n}) ();\",\"(function () {\\r\\n\\r\\n  // for convenience\\r\\n  var loginButtonsSession = Accounts._loginButtonsSession;\\r\\n\\r\\n  // events shared between loginButtonsLoggedOutDropdown and\\r\\n  // loginButtonsLoggedInDropdown\\r\\n  Template._loginButtons.events({\\r\\n    'click input, click label, click button, click .dropdown-menu, click .alert': function(event) {\\r\\n      event.stopPropagation();\\r\\n    },\\r\\n    'click #login-name-link, click #login-sign-in-link': function () {\\r\\n      event.stopPropagation();\\r\\n      loginButtonsSession.set('dropdownVisible', true);\\r\\n      Meteor.flush();\\r\\n    },\\r\\n    'click .login-close': function () {\\r\\n      loginButtonsSession.closeDropdown();\\r\\n    }\\r\\n  });\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsLoggedInDropdown template and related\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdown.events({\\r\\n    'click #login-buttons-open-change-password': function(event) {\\r\\n      event.stopPropagation();\\r\\n      loginButtonsSession.resetMessages();\\r\\n      loginButtonsSession.set('inChangePasswordFlow', true);\\r\\n      Meteor.flush();\\r\\n      toggleDropdown();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdown.displayName = function () {\\r\\n    return Accounts._loginButtons.displayName();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdown.inChangePasswordFlow = function () {\\r\\n    return loginButtonsSession.get('inChangePasswordFlow');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdown.inMessageOnlyFlow = function () {\\r\\n    return loginButtonsSession.get('inMessageOnlyFlow');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdown.dropdownVisible = function () {\\r\\n    return loginButtonsSession.get('dropdownVisible');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdownActions.allowChangingPassword = function () {\\r\\n    // it would be more correct to check whether the user has a password set,\\r\\n    // but in order to do that we'd have to send more data down to the client,\\r\\n    // and it'd be preferable not to send down the entire service.password document.\\r\\n    //\\r\\n    // instead we use the heuristic: if the user has a username or email set.\\r\\n    var user = Meteor.user();\\r\\n    return user.username || (user.emails && user.emails[0] && user.emails[0].address);\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsLoggedOutDropdown template and related\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsLoggedOutDropdown.events({\\r\\n    'click #login-buttons-password': function () {\\r\\n      loginOrSignup();\\r\\n    },\\r\\n\\r\\n    'keypress #forgot-password-email': function (event) {\\r\\n      if (event.keyCode === 13)\\r\\n        forgotPassword();\\r\\n    },\\r\\n\\r\\n    'click #login-buttons-forgot-password': function (event) {\\r\\n      event.stopPropagation();\\r\\n      forgotPassword();\\r\\n    },\\r\\n\\r\\n    'click #signup-link': function (event) {\\r\\n      event.stopPropagation();\\r\\n      loginButtonsSession.resetMessages();\\r\\n\\r\\n      // store values of fields before swtiching to the signup form\\r\\n      var username = trimmedElementValueById('login-username');\\r\\n      var email = trimmedElementValueById('login-email');\\r\\n      var usernameOrEmail = trimmedElementValueById('login-username-or-email');\\r\\n      // notably not trimmed. a password could (?) start or end with a space\\r\\n      var password = elementValueById('login-password');\\r\\n\\r\\n      loginButtonsSession.set('inSignupFlow', true);\\r\\n      loginButtonsSession.set('inForgotPasswordFlow', false);\\r\\n\\r\\n      // force the ui to update so that we have the approprate fields to fill in\\r\\n      Meteor.flush();\\r\\n\\r\\n      // update new fields with appropriate defaults\\r\\n      if (username !== null)\\r\\n        document.getElementById('login-username').value = username;\\r\\n      else if (email !== null)\\r\\n        document.getElementById('login-email').value = email;\\r\\n      else if (usernameOrEmail !== null)\\r\\n        if (usernameOrEmail.indexOf('@') === -1)\\r\\n          document.getElementById('login-username').value = usernameOrEmail;\\r\\n      else\\r\\n        document.getElementById('login-email').value = usernameOrEmail;\\r\\n    },\\r\\n    'click #forgot-password-link': function (event) {\\r\\n      event.stopPropagation();\\r\\n      loginButtonsSession.resetMessages();\\r\\n\\r\\n      // store values of fields before swtiching to the signup form\\r\\n      var email = trimmedElementValueById('login-email');\\r\\n      var usernameOrEmail = trimmedElementValueById('login-username-or-email');\\r\\n\\r\\n      loginButtonsSession.set('inSignupFlow', false);\\r\\n      loginButtonsSession.set('inForgotPasswordFlow', true);\\r\\n\\r\\n      // force the ui to update so that we have the approprate fields to fill in\\r\\n      Meteor.flush();\\r\\n      //toggleDropdown();\\r\\n\\r\\n      // update new fields with appropriate defaults\\r\\n      if (email !== null)\\r\\n        document.getElementById('forgot-password-email').value = email;\\r\\n      else if (usernameOrEmail !== null)\\r\\n        if (usernameOrEmail.indexOf('@') !== -1)\\r\\n          document.getElementById('forgot-password-email').value = usernameOrEmail;\\r\\n    },\\r\\n    'click #back-to-login-link': function () {\\r\\n      loginButtonsSession.resetMessages();\\r\\n\\r\\n      var username = trimmedElementValueById('login-username');\\r\\n      var email = trimmedElementValueById('login-email')\\r\\n            || trimmedElementValueById('forgot-password-email'); // Ughh. Standardize on names?\\r\\n\\r\\n      loginButtonsSession.set('inSignupFlow', false);\\r\\n      loginButtonsSession.set('inForgotPasswordFlow', false);\\r\\n\\r\\n      // force the ui to update so that we have the approprate fields to fill in\\r\\n      Meteor.flush();\\r\\n\\r\\n      if (document.getElementById('login-username'))\\r\\n        document.getElementById('login-username').value = username;\\r\\n      if (document.getElementById('login-email'))\\r\\n        document.getElementById('login-email').value = email;\\r\\n      // \\\"login-password\\\" is preserved thanks to the preserve-inputs package\\r\\n      if (document.getElementById('login-username-or-email'))\\r\\n        document.getElementById('login-username-or-email').value = email || username;\\r\\n    },\\r\\n    'keypress #login-username, keypress #login-email, keypress #login-username-or-email, keypress #login-password, keypress #login-password-again': function (event) {\\r\\n      if (event.keyCode === 13)\\r\\n        loginOrSignup();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  // additional classes that can be helpful in styling the dropdown\\r\\n  Template._loginButtonsLoggedOutDropdown.additionalClasses = function () {\\r\\n    if (!Accounts.password) {\\r\\n      return false;\\r\\n    } else {\\r\\n      if (loginButtonsSession.get('inSignupFlow')) {\\r\\n        return 'login-form-create-account';\\r\\n      } else if (loginButtonsSession.get('inForgotPasswordFlow')) {\\r\\n        return 'login-form-forgot-password';\\r\\n      } else {\\r\\n        return 'login-form-sign-in';\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutDropdown.dropdownVisible = function () {\\r\\n    return loginButtonsSession.get('dropdownVisible');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutDropdown.hasPasswordService = function () {\\r\\n    return Accounts._loginButtons.hasPasswordService();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutAllServices.services = function () {\\r\\n    return Accounts._loginButtons.getLoginServices();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutAllServices.isPasswordService = function () {\\r\\n    return this.name === 'password';\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutAllServices.hasOtherServices = function () {\\r\\n    return Accounts._loginButtons.getLoginServices().length > 1;\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutAllServices.hasPasswordService = function () {\\r\\n    return Accounts._loginButtons.hasPasswordService();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.fields = function () {\\r\\n    var loginFields = [\\r\\n      {fieldName: 'username-or-email', fieldLabel: 'Username or Email',\\r\\n       visible: function () {\\r\\n         return _.contains(\\r\\n           [\\\"USERNAME_AND_EMAIL_CONFIRM\\\", \\\"USERNAME_AND_EMAIL\\\", \\\"USERNAME_AND_OPTIONAL_EMAIL\\\"],\\r\\n           Accounts.ui._passwordSignupFields());\\r\\n       }},\\r\\n      {fieldName: 'username', fieldLabel: 'Username',\\r\\n       visible: function () {\\r\\n         return Accounts.ui._passwordSignupFields() === \\\"USERNAME_ONLY\\\";\\r\\n       }},\\r\\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\\r\\n       visible: function () {\\r\\n         return Accounts.ui._passwordSignupFields() === \\\"EMAIL_ONLY\\\";\\r\\n       }},\\r\\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\\r\\n       visible: function () {\\r\\n         return true;\\r\\n       }}\\r\\n    ];\\r\\n\\r\\n    var signupFields = [\\r\\n      {fieldName: 'username', fieldLabel: 'Username',\\r\\n       visible: function () {\\r\\n         return _.contains(\\r\\n           [\\\"USERNAME_AND_EMAIL_CONFIRM\\\",\\\"USERNAME_AND_EMAIL\\\", \\\"USERNAME_AND_OPTIONAL_EMAIL\\\", \\\"USERNAME_ONLY\\\"],\\r\\n           Accounts.ui._passwordSignupFields());\\r\\n       }},\\r\\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\\r\\n       visible: function () {\\r\\n         return _.contains(\\r\\n           [\\\"USERNAME_AND_EMAIL_CONFIRM\\\",\\\"USERNAME_AND_EMAIL\\\", \\\"EMAIL_ONLY\\\"],\\r\\n           Accounts.ui._passwordSignupFields());\\r\\n       }},\\r\\n      {fieldName: 'email', fieldLabel: 'Email (optional)', inputType: 'email',\\r\\n       visible: function () {\\r\\n         return Accounts.ui._passwordSignupFields() === \\\"USERNAME_AND_OPTIONAL_EMAIL\\\";\\r\\n       }},\\r\\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\\r\\n       visible: function () {\\r\\n         return true;\\r\\n       }},\\r\\n      {fieldName: 'password-again', fieldLabel: 'Password (again)',\\r\\n       inputType: 'password',\\r\\n       visible: function () {\\r\\n         // No need to make users double-enter their password if\\r\\n         // they'll necessarily have an email set, since they can use\\r\\n         // the \\\"forgot password\\\" flow.\\r\\n         return _.contains(\\r\\n           [\\\"USERNAME_AND_EMAIL_CONFIRM\\\",\\\"USERNAME_AND_OPTIONAL_EMAIL\\\", \\\"USERNAME_ONLY\\\"],\\r\\n           Accounts.ui._passwordSignupFields());\\r\\n       }}\\r\\n    ];\\r\\n\\r\\n    return loginButtonsSession.get('inSignupFlow') ? signupFields : loginFields;\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.inForgotPasswordFlow = function () {\\r\\n    return loginButtonsSession.get('inForgotPasswordFlow');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.inLoginFlow = function () {\\r\\n    return !loginButtonsSession.get('inSignupFlow') && !loginButtonsSession.get('inForgotPasswordFlow');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.inSignupFlow = function () {\\r\\n    return loginButtonsSession.get('inSignupFlow');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.showForgotPasswordLink = function () {\\r\\n    return _.contains(\\r\\n      [\\\"USERNAME_AND_EMAIL_CONFIRM\\\",\\\"USERNAME_AND_EMAIL\\\", \\\"USERNAME_AND_OPTIONAL_EMAIL\\\", \\\"EMAIL_ONLY\\\"],\\r\\n      Accounts.ui._passwordSignupFields());\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.showCreateAccountLink = function() {\\r\\n    return !Accounts._options.forbidClientAccountCreation;\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsFormField.inputType = function () {\\r\\n    return this.inputType || \\\"text\\\";\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsChangePassword template\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsChangePassword.events({\\r\\n    'keypress #login-old-password, keypress #login-password, keypress #login-password-again': function (event) {\\r\\n      if (event.keyCode === 13)\\r\\n        changePassword();\\r\\n    },\\r\\n    'click #login-buttons-do-change-password': function (event) {\\r\\n      event.stopPropagation();\\r\\n      changePassword();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._loginButtonsChangePassword.fields = function () {\\r\\n    return [\\r\\n      {fieldName: 'old-password', fieldLabel: 'Current Password', inputType: 'password',\\r\\n       visible: function () {\\r\\n         return true;\\r\\n       }},\\r\\n      {fieldName: 'password', fieldLabel: 'New Password', inputType: 'password',\\r\\n       visible: function () {\\r\\n         return true;\\r\\n       }},\\r\\n      {fieldName: 'password-again', fieldLabel: 'New Password (again)',\\r\\n       inputType: 'password',\\r\\n       visible: function () {\\r\\n         // No need to make users double-enter their password if\\r\\n         // they'll necessarily have an email set, since they can use\\r\\n         // the \\\"forgot password\\\" flow.\\r\\n         return _.contains(\\r\\n           [\\\"USERNAME_AND_OPTIONAL_EMAIL\\\", \\\"USERNAME_ONLY\\\"],\\r\\n           Accounts.ui._passwordSignupFields());\\r\\n       }}\\r\\n    ];\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // helpers\\r\\n  //\\r\\n\\r\\n  var elementValueById = function(id) {\\r\\n    var element = document.getElementById(id);\\r\\n    if (!element)\\r\\n      return null;\\r\\n    else\\r\\n      return element.value;\\r\\n  };\\r\\n\\r\\n  var trimmedElementValueById = function(id) {\\r\\n    var element = document.getElementById(id);\\r\\n    if (!element)\\r\\n      return null;\\r\\n    else\\r\\n      return element.value.replace(/^\\\\s*|\\\\s*$/g, \\\"\\\"); // trim;\\r\\n  };\\r\\n\\r\\n  var loginOrSignup = function () {\\r\\n    if (loginButtonsSession.get('inSignupFlow'))\\r\\n      signup();\\r\\n    else\\r\\n      login();\\r\\n  };\\r\\n\\r\\n  var login = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n\\r\\n    var username = trimmedElementValueById('login-username');\\r\\n    var email = trimmedElementValueById('login-email');\\r\\n    var usernameOrEmail = trimmedElementValueById('login-username-or-email');\\r\\n    // notably not trimmed. a password could (?) start or end with a space\\r\\n    var password = elementValueById('login-password');\\r\\n\\r\\n    var loginSelector;\\r\\n    if (username !== null) {\\r\\n      if (!Accounts._loginButtons.validateUsername(username))\\r\\n        return;\\r\\n      else\\r\\n        loginSelector = {username: username};\\r\\n    } else if (email !== null) {\\r\\n      if (!Accounts._loginButtons.validateEmail(email))\\r\\n        return;\\r\\n      else\\r\\n        loginSelector = {email: email};\\r\\n    } else if (usernameOrEmail !== null) {\\r\\n      // XXX not sure how we should validate this. but this seems good enough (for now),\\r\\n      // since an email must have at least 3 characters anyways\\r\\n      if (!Accounts._loginButtons.validateUsername(usernameOrEmail))\\r\\n        return;\\r\\n      else\\r\\n        loginSelector = usernameOrEmail;\\r\\n    } else {\\r\\n      throw new Error(\\\"Unexpected -- no element to use as a login user selector\\\");\\r\\n    }\\r\\n\\r\\n    Meteor.loginWithPassword(loginSelector, password, function (error, result) {\\r\\n      if (error) {\\r\\n        loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n      } else {\\r\\n        loginButtonsSession.closeDropdown();\\r\\n      }\\r\\n    });\\r\\n  };\\r\\n\\r\\n  var toggleDropdown = function() {\\r\\n    $('#login-dropdown-list .dropdown-menu').dropdown('toggle');\\r\\n  };\\r\\n\\r\\n  var signup = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n\\r\\n    var options = {}; // to be passed to Accounts.createUser\\r\\n\\r\\n    var username = trimmedElementValueById('login-username');\\r\\n    if (username !== null) {\\r\\n      if (!Accounts._loginButtons.validateUsername(username))\\r\\n        return;\\r\\n      else\\r\\n        options.username = username;\\r\\n    }\\r\\n\\r\\n    var email = trimmedElementValueById('login-email');\\r\\n    if (email !== null) {\\r\\n      if (!Accounts._loginButtons.validateEmail(email))\\r\\n        return;\\r\\n      else\\r\\n        options.email = email;\\r\\n    }\\r\\n\\r\\n    // notably not trimmed. a password could (?) start or end with a space\\r\\n    var password = elementValueById('login-password');\\r\\n    if (!Accounts._loginButtons.validatePassword(password))\\r\\n      return;\\r\\n    else\\r\\n      options.password = password;\\r\\n\\r\\n    if (!matchPasswordAgainIfPresent())\\r\\n      return;\\r\\n\\r\\n    Accounts.createUser(options, function (error) {\\r\\n      if (error) {\\r\\n        loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n      } else {\\r\\n        loginButtonsSession.closeDropdown();\\r\\n      }\\r\\n    });\\r\\n  };\\r\\n\\r\\n  var forgotPassword = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n\\r\\n    var email = trimmedElementValueById(\\\"forgot-password-email\\\");\\r\\n    if (email.indexOf('@') !== -1) {\\r\\n      Accounts.forgotPassword({email: email}, function (error) {\\r\\n        if (error)\\r\\n          loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n        else\\r\\n          loginButtonsSession.infoMessage(\\\"Email sent\\\");\\r\\n      });\\r\\n    } else {\\r\\n      loginButtonsSession.infoMessage(\\\"Email sent\\\");\\r\\n    }\\r\\n  };\\r\\n\\r\\n  var changePassword = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n\\r\\n    // notably not trimmed. a password could (?) start or end with a space\\r\\n    var oldPassword = elementValueById('login-old-password');\\r\\n\\r\\n    // notably not trimmed. a password could (?) start or end with a space\\r\\n    var password = elementValueById('login-password');\\r\\n    if (!Accounts._loginButtons.validatePassword(password))\\r\\n      return;\\r\\n\\r\\n    if (!matchPasswordAgainIfPresent())\\r\\n      return;\\r\\n\\r\\n    Accounts.changePassword(oldPassword, password, function (error) {\\r\\n      if (error) {\\r\\n         loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n      } else {\\r\\n        loginButtonsSession.infoMessage(\\\"Password changed\\\");\\r\\n\\r\\n        // wait 3 seconds, then expire the msg\\r\\n        Meteor.setTimeout(function() {\\r\\n          loginButtonsSession.resetMessages();\\r\\n        }, 3000);\\r\\n      }\\r\\n    });\\r\\n  };\\r\\n\\r\\n  var matchPasswordAgainIfPresent = function () {\\r\\n    // notably not trimmed. a password could (?) start or end with a space\\r\\n    var passwordAgain = elementValueById('login-password-again');\\r\\n    if (passwordAgain !== null) {\\r\\n      // notably not trimmed. a password could (?) start or end with a space\\r\\n      var password = elementValueById('login-password');\\r\\n      if (password !== passwordAgain) {\\r\\n        loginButtonsSession.errorMessage(\\\"Passwords don't match\\\");\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n    return true;\\r\\n  };\\r\\n}) ();\\r\\n\",\"(function () {\\r\\n  // for convenience\\r\\n  var loginButtonsSession = Accounts._loginButtonsSession;\\r\\n\\r\\n\\r\\n  //\\r\\n  // populate the session so that the appropriate dialogs are\\r\\n  // displayed by reading variables set by accounts-urls, which parses\\r\\n  // special URLs. since accounts-ui depends on accounts-urls, we are\\r\\n  // guaranteed to have these set at this point.\\r\\n  //\\r\\n\\r\\n  if (Accounts._resetPasswordToken) {\\r\\n    loginButtonsSession.set('resetPasswordToken', Accounts._resetPasswordToken);\\r\\n  }\\r\\n\\r\\n  if (Accounts._enrollAccountToken) {\\r\\n    loginButtonsSession.set('enrollAccountToken', Accounts._enrollAccountToken);\\r\\n  }\\r\\n\\r\\n  // Needs to be in Meteor.startup because of a package loading order\\r\\n  // issue. We can't be sure that accounts-password is loaded earlier\\r\\n  // than accounts-ui so Accounts.verifyEmail might not be defined.\\r\\n  Meteor.startup(function () {\\r\\n    if (Accounts._verifyEmailToken) {\\r\\n      Accounts.verifyEmail(Accounts._verifyEmailToken, function(error) {\\r\\n        Accounts._enableAutoLogin();\\r\\n        if (!error)\\r\\n          loginButtonsSession.set('justVerifiedEmail', true);\\r\\n        // XXX show something if there was an error.\\r\\n      });\\r\\n    }\\r\\n  });\\r\\n\\r\\n\\r\\n  //\\r\\n  // resetPasswordDialog template\\r\\n  //\\r\\n  Template._resetPasswordDialog.rendered = function() {\\r\\n    var $modal = $(this.find('#login-buttons-reset-password-modal'));\\r\\n    $modal.modal();\\r\\n  }\\r\\n\\r\\n  Template._resetPasswordDialog.events({\\r\\n    'click #login-buttons-reset-password-button': function () {\\r\\n      resetPassword();\\r\\n    },\\r\\n    'keypress #reset-password-new-password': function (event) {\\r\\n      if (event.keyCode === 13)\\r\\n        resetPassword();\\r\\n    },\\r\\n    'click #login-buttons-cancel-reset-password': function () {\\r\\n      loginButtonsSession.set('resetPasswordToken', null);\\r\\n      Accounts._enableAutoLogin();\\r\\n      $('#login-buttons-reset-password-modal').modal(\\\"hide\\\");\\r\\n    }\\r\\n  });\\r\\n\\r\\n  var resetPassword = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n    var newPassword = document.getElementById('reset-password-new-password').value;\\r\\n    if (!Accounts._loginButtons.validatePassword(newPassword))\\r\\n      return;\\r\\n\\r\\n    Accounts.resetPassword(\\r\\n      loginButtonsSession.get('resetPasswordToken'), newPassword,\\r\\n      function (error) {\\r\\n        if (error) {\\r\\n          loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n        } else {\\r\\n          loginButtonsSession.set('resetPasswordToken', null);\\r\\n          Accounts._enableAutoLogin();\\r\\n          $('#login-buttons-reset-password-modal').modal(\\\"hide\\\");\\r\\n        }\\r\\n      });\\r\\n  };\\r\\n\\r\\n  Template._resetPasswordDialog.inResetPasswordFlow = function () {\\r\\n    return loginButtonsSession.get('resetPasswordToken');\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // enrollAccountDialog template\\r\\n  //\\r\\n\\r\\n  Template._enrollAccountDialog.events({\\r\\n    'click #login-buttons-enroll-account-button': function () {\\r\\n      enrollAccount();\\r\\n    },\\r\\n    'keypress #enroll-account-password': function (event) {\\r\\n      if (event.keyCode === 13)\\r\\n        enrollAccount();\\r\\n    },\\r\\n    'click #login-buttons-cancel-enroll-account-button': function () {\\r\\n      loginButtonsSession.set('enrollAccountToken', null);\\r\\n      Accounts._enableAutoLogin();\\r\\n      $modal.modal(\\\"hide\\\");\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._enrollAccountDialog.rendered = function() {\\r\\n    $modal = $(this.find('#login-buttons-enroll-account-modal'));\\r\\n    $modal.modal();\\r\\n  };\\r\\n\\r\\n  var enrollAccount = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n    var password = document.getElementById('enroll-account-password').value;\\r\\n    if (!Accounts._loginButtons.validatePassword(password))\\r\\n      return;\\r\\n\\r\\n    Accounts.resetPassword(\\r\\n      loginButtonsSession.get('enrollAccountToken'), password,\\r\\n      function (error) {\\r\\n        if (error) {\\r\\n          loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n        } else {\\r\\n          loginButtonsSession.set('enrollAccountToken', null);\\r\\n          Accounts._enableAutoLogin();\\r\\n          $modal.modal(\\\"hide\\\");\\r\\n        }\\r\\n      });\\r\\n  };\\r\\n\\r\\n  Template._enrollAccountDialog.inEnrollAccountFlow = function () {\\r\\n    return loginButtonsSession.get('enrollAccountToken');\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // justVerifiedEmailDialog template\\r\\n  //\\r\\n\\r\\n  Template._justVerifiedEmailDialog.events({\\r\\n    'click #just-verified-dismiss-button': function () {\\r\\n      loginButtonsSession.set('justVerifiedEmail', false);\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._justVerifiedEmailDialog.visible = function () {\\r\\n    return loginButtonsSession.get('justVerifiedEmail');\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsMessagesDialog template\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsMessagesDialog.events({\\r\\n    'click #messages-dialog-dismiss-button': function () {\\r\\n      loginButtonsSession.resetMessages();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._loginButtonsMessagesDialog.visible = function () {\\r\\n    var hasMessage = loginButtonsSession.get('infoMessage') || loginButtonsSession.get('errorMessage');\\r\\n    return !Accounts._loginButtons.dropdown() && hasMessage;\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // configureLoginServiceDialog template\\r\\n  //\\r\\n\\r\\n  Template._configureLoginServiceDialog.events({\\r\\n    'click .configure-login-service-dismiss-button': function () {\\r\\n      loginButtonsSession.set('configureLoginServiceDialogVisible', false);\\r\\n    },\\r\\n    'click #configure-login-service-dialog-save-configuration': function () {\\r\\n      if (loginButtonsSession.get('configureLoginServiceDialogVisible') &&\\r\\n          ! loginButtonsSession.get('configureLoginServiceDialogSaveDisabled')) {\\r\\n        // Prepare the configuration document for this login service\\r\\n        var serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\\r\\n        var configuration = {\\r\\n          service: serviceName\\r\\n        };\\r\\n        _.each(configurationFields(), function(field) {\\r\\n          configuration[field.property] = document.getElementById(\\r\\n            'configure-login-service-dialog-' + field.property).value\\r\\n            .replace(/^\\\\s*|\\\\s*$/g, \\\"\\\"); // trim;\\r\\n        });\\r\\n\\r\\n        // Configure this login service\\r\\n        Meteor.call(\\\"configureLoginService\\\", configuration, function (error, result) {\\r\\n          if (error)\\r\\n            Meteor._debug(\\\"Error configuring login service \\\" + serviceName, error);\\r\\n          else\\r\\n            loginButtonsSession.set('configureLoginServiceDialogVisible', false);\\r\\n        });\\r\\n      }\\r\\n    },\\r\\n    // IE8 doesn't support the 'input' event, so we'll run this on the keyup as\\r\\n    // well. (Keeping the 'input' event means that this also fires when you use\\r\\n    // the mouse to change the contents of the field, eg 'Cut' menu item.)\\r\\n    'input, keyup input': function (event) {\\r\\n      // if the event fired on one of the configuration input fields,\\r\\n      // check whether we should enable the 'save configuration' button\\r\\n      if (event.target.id.indexOf('configure-login-service-dialog') === 0)\\r\\n        updateSaveDisabled();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  // check whether the 'save configuration' button should be enabled.\\r\\n  // this is a really strange way to implement this and a Forms\\r\\n  // Abstraction would make all of this reactive, and simpler.\\r\\n  var updateSaveDisabled = function () {\\r\\n    var anyFieldEmpty = _.any(configurationFields(), function(field) {\\r\\n      return document.getElementById(\\r\\n        'configure-login-service-dialog-' + field.property).value === '';\\r\\n    });\\r\\n\\r\\n    loginButtonsSession.set('configureLoginServiceDialogSaveDisabled', anyFieldEmpty);\\r\\n  };\\r\\n\\r\\n  // Returns the appropriate template for this login service.  This\\r\\n  // template should be defined in the service's package\\r\\n  var configureLoginServiceDialogTemplateForService = function () {\\r\\n    var serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\\r\\n    return Template['configureLoginServiceDialogFor' + capitalize(serviceName)];\\r\\n  };\\r\\n\\r\\n  var configurationFields = function () {\\r\\n    var template = configureLoginServiceDialogTemplateForService();\\r\\n    return template.fields();\\r\\n  };\\r\\n\\r\\n  Template._configureLoginServiceDialog.configurationFields = function () {\\r\\n    return configurationFields();\\r\\n  };\\r\\n\\r\\n  Template._configureLoginServiceDialog.visible = function () {\\r\\n    return loginButtonsSession.get('configureLoginServiceDialogVisible');\\r\\n  };\\r\\n\\r\\n  Template._configureLoginServiceDialog.configurationSteps = function () {\\r\\n    // renders the appropriate template\\r\\n    return configureLoginServiceDialogTemplateForService()();\\r\\n  };\\r\\n\\r\\n  Template._configureLoginServiceDialog.saveDisabled = function () {\\r\\n    return loginButtonsSession.get('configureLoginServiceDialogSaveDisabled');\\r\\n  };\\r\\n\\r\\n\\r\\n  // XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\\r\\n  var capitalize = function(str){\\r\\n    str = str == null ? '' : String(str);\\r\\n    return str.charAt(0).toUpperCase() + str.slice(1);\\r\\n  };\\r\\n\\r\\n}) ();\\r\\n\"]}\n\nC:\\dev\\meteor\\ctm.in.ua\\packages\\accounts-ui-bootstrap-3\\login_buttons.js:\n   10      function (options) {\n   11        if (options.hash.align === \"left\")\n   12:         return new Handlebars.SafeString(Template._loginButtons({align: \"left\"}));\n   13        else\n   14:         return new Handlebars.SafeString(Template._loginButtons({align: \"right\"}));\n   15      });\n   16  \n   17    // shared between dropdown and single mode\n   18:   Template._loginButtons.events({\n   19      'click #login-buttons-logout': function() {\n   20        Meteor.logout(function () {\n   ..\n   24    });\n   25  \n   26:   Template._loginButtons.preserve({\n   27      'input[id]': Spark._labelFromIdOrName\n   28    });\n   ..\n   32    //\n   33  \n   34:   Template._loginButtonsLoggedOut.dropdown = function () {\n   35      return Accounts._loginButtons.dropdown();\n   36    };\n   37  \n   38:   Template._loginButtonsLoggedOut.services = function () {\n   39      return Accounts._loginButtons.getLoginServices();\n   40    };\n   41  \n   42:   Template._loginButtonsLoggedOut.singleService = function () {\n   43      var services = Accounts._loginButtons.getLoginServices();\n   44      if (services.length !== 1)\n   ..\n   48    };\n   49  \n   50:   Template._loginButtonsLoggedOut.configurationLoaded = function () {\n   51      return Accounts.loginServicesConfigured();\n   52    };\n   ..\n   59    // decide whether we should show a dropdown rather than a row of\n   60    // buttons\n   61:   Template._loginButtonsLoggedIn.dropdown = function () {\n   62      return Accounts._loginButtons.dropdown();\n   63    };\n   64  \n   65:   Template._loginButtonsLoggedIn.displayName = function () {\n   66      return Accounts._loginButtons.displayName();\n   67    };\n   ..\n   73    //\n   74  \n   75:   Template._loginButtonsMessages.errorMessage = function () {\n   76      return loginButtonsSession.get('errorMessage');\n   77    };\n   78  \n   79:   Template._loginButtonsMessages.infoMessage = function () {\n   80      return loginButtonsSession.get('infoMessage');\n   81    };\n   ..\n   85    //\n   86  \n   87:   Template._loginButtonsLoggingInPadding.dropdown = function () {\n   88      return Accounts._loginButtons.dropdown();\n   89    };\n\nC:\\dev\\meteor\\ctm.in.ua\\packages\\accounts-ui-bootstrap-3\\login_buttons_dialogs.js:\n  148    //\n  149  \n  150:   Template._loginButtonsMessagesDialog.events({\n  151      'click #messages-dialog-dismiss-button': function () {\n  152        loginButtonsSession.resetMessages();\n  ...\n  154    });\n  155  \n  156:   Template._loginButtonsMessagesDialog.visible = function () {\n  157      var hasMessage = loginButtonsSession.get('infoMessage') || loginButtonsSession.get('errorMessage');\n  158      return !Accounts._loginButtons.dropdown() && hasMessage;\n\nC:\\dev\\meteor\\ctm.in.ua\\packages\\accounts-ui-bootstrap-3\\login_buttons_dropdown.js:\n    6    // events shared between loginButtonsLoggedOutDropdown and\n    7    // loginButtonsLoggedInDropdown\n    8:   Template._loginButtons.events({\n    9      'click input, click label, click button, click .dropdown-menu, click .alert': function(event) {\n   10        event.stopPropagation();\n   ..\n   25    //\n   26  \n   27:   Template._loginButtonsLoggedInDropdown.events({\n   28      'click #login-buttons-open-change-password': function(event) {\n   29        event.stopPropagation();\n   ..\n   35    });\n   36  \n   37:   Template._loginButtonsLoggedInDropdown.displayName = function () {\n   38      return Accounts._loginButtons.displayName();\n   39    };\n   40  \n   41:   Template._loginButtonsLoggedInDropdown.inChangePasswordFlow = function () {\n   42      return loginButtonsSession.get('inChangePasswordFlow');\n   43    };\n   44  \n   45:   Template._loginButtonsLoggedInDropdown.inMessageOnlyFlow = function () {\n   46      return loginButtonsSession.get('inMessageOnlyFlow');\n   47    };\n   48  \n   49:   Template._loginButtonsLoggedInDropdown.dropdownVisible = function () {\n   50      return loginButtonsSession.get('dropdownVisible');\n   51    };\n   52  \n   53:   Template._loginButtonsLoggedInDropdownActions.allowChangingPassword = function () {\n   54      // it would be more correct to check whether the user has a password set,\n   55      // but in order to do that we'd have to send more data down to the client,\n   ..\n   66    //\n   67  \n   68:   Template._loginButtonsLoggedOutDropdown.events({\n   69      'click #login-buttons-password': function () {\n   70        loginOrSignup();\n   ..\n  159  \n  160    // additional classes that can be helpful in styling the dropdown\n  161:   Template._loginButtonsLoggedOutDropdown.additionalClasses = function () {\n  162      if (!Accounts.password) {\n  163        return false;\n  ...\n  173    };\n  174  \n  175:   Template._loginButtonsLoggedOutDropdown.dropdownVisible = function () {\n  176      return loginButtonsSession.get('dropdownVisible');\n  177    };\n  178  \n  179:   Template._loginButtonsLoggedOutDropdown.hasPasswordService = function () {\n  180      return Accounts._loginButtons.hasPasswordService();\n  181    };\n  182  \n  183:   Template._loginButtonsLoggedOutAllServices.services = function () {\n  184      return Accounts._loginButtons.getLoginServices();\n  185    };\n  186  \n  187:   Template._loginButtonsLoggedOutAllServices.isPasswordService = function () {\n  188      return this.name === 'password';\n  189    };\n  190  \n  191:   Template._loginButtonsLoggedOutAllServices.hasOtherServices = function () {\n  192      return Accounts._loginButtons.getLoginServices().length > 1;\n  193    };\n  194  \n  195:   Template._loginButtonsLoggedOutAllServices.hasPasswordService = function () {\n  196      return Accounts._loginButtons.hasPasswordService();\n  197    };\n  198  \n  199:   Template._loginButtonsLoggedOutPasswordService.fields = function () {\n  200      var loginFields = [\n  201        {fieldName: 'username-or-email', fieldLabel: 'Username or Email',\n  ...\n  255    };\n  256  \n  257:   Template._loginButtonsLoggedOutPasswordService.inForgotPasswordFlow = function () {\n  258      return loginButtonsSession.get('inForgotPasswordFlow');\n  259    };\n  260  \n  261:   Template._loginButtonsLoggedOutPasswordService.inLoginFlow = function () {\n  262      return !loginButtonsSession.get('inSignupFlow') && !loginButtonsSession.get('inForgotPasswordFlow');\n  263    };\n  264  \n  265:   Template._loginButtonsLoggedOutPasswordService.inSignupFlow = function () {\n  266      return loginButtonsSession.get('inSignupFlow');\n  267    };\n  268  \n  269:   Template._loginButtonsLoggedOutPasswordService.showForgotPasswordLink = function () {\n  270      return _.contains(\n  271        [\"USERNAME_AND_EMAIL_CONFIRM\",\"USERNAME_AND_EMAIL\", \"USERNAME_AND_OPTIONAL_EMAIL\", \"EMAIL_ONLY\"],\n  ...\n  273    };\n  274  \n  275:   Template._loginButtonsLoggedOutPasswordService.showCreateAccountLink = function() {\n  276      return !Accounts._options.forbidClientAccountCreation;\n  277    };\n  278  \n  279:   Template._loginButtonsFormField.inputType = function () {\n  280      return this.inputType || \"text\";\n  281    };\n  ...\n  286    //\n  287  \n  288:   Template._loginButtonsChangePassword.events({\n  289      'keypress #login-old-password, keypress #login-password, keypress #login-password-again': function (event) {\n  290        if (event.keyCode === 13)\n  ...\n  297    });\n  298  \n  299:   Template._loginButtonsChangePassword.fields = function () {\n  300      return [\n  301        {fieldName: 'old-password', fieldLabel: 'Current Password', inputType: 'password',\n\nC:\\dev\\meteor\\ctm.in.ua\\packages\\accounts-ui-bootstrap-3\\login_buttons_single.js:\n    3    var loginButtonsSession = Accounts._loginButtonsSession;\n    4  \n    5:   Template._loginButtonsLoggedOutSingleLoginButton.events({\n    6      'click .login-button': function () {\n    7        var serviceName = this.name;\n    .\n   29    });\n   30  \n   31:   Template._loginButtonsLoggedOutSingleLoginButton.configured = function () {\n   32      return !!Accounts.loginServiceConfiguration.findOne({service: this.name});\n   33    };\n   34  \n   35:   Template._loginButtonsLoggedOutSingleLoginButton.capitalizedName = function () {\n   36      if (this.name === 'github')\n   37        // XXX we should allow service packages to set their capitalized name\n\n126 matches across 6 files\n\n\nSearching 34 files for \"Template._loginButtons.\"\n\nC:\\dev\\meteor\\ctm.in.ua\\packages\\accounts-ui-bootstrap-3\\.build\\browser\\packages\\accounts-ui-bootstrap-3.js:\n  309                                                                                                                   // 16\n  310    // shared between dropdown and single mode                                                                     // 17\n  311:   Template._loginButtons.events({                                                                                // 18\n  312      'click #login-buttons-logout': function() {                                                                  // 19\n  313        Meteor.logout(function () {                                                                                // 20\n  ...\n  317    });                                                                                                            // 24\n  318                                                                                                                   // 25\n  319:   Template._loginButtons.preserve({                                                                              // 26\n  320      'input[id]': Spark._labelFromIdOrName                                                                        // 27\n  321    });                                                                                                            // 28\n  ...\n  552    // events shared between loginButtonsLoggedOutDropdown and                                                     // 6\n  553    // loginButtonsLoggedInDropdown                                                                                // 7\n  554:   Template._loginButtons.events({                                                                                // 8\n  555      'click input, click label, click button, click .dropdown-menu, click .alert': function(event) {              // 9\n  556        event.stopPropagation();                                                                                   // 10\n\nC:\\dev\\meteor\\ctm.in.ua\\packages\\accounts-ui-bootstrap-3\\.build\\browser\\packages\\accounts-ui-bootstrap-3.js.map:\n    1: {\"version\":3,\"file\":\"\\\\packages\\\\accounts-ui-bootstrap-3.js\",\"sources\":[\"accounts-ui-bootstrap-3/accounts_ui.js\",\"accounts-ui-bootstrap-3/login_buttons.html\",\"accounts-ui-bootstrap-3/login_buttons_single.html\",\"accounts-ui-bootstrap-3/login_buttons_dropdown.html\",\"accounts-ui-bootstrap-3/login_buttons_dialogs.html\",\"accounts-ui-bootstrap-3/login_buttons_session.js\",\"accounts-ui-bootstrap-3/login_buttons.js\",\"accounts-ui-bootstrap-3/login_buttons_single.js\",\"accounts-ui-bootstrap-3/login_buttons_dropdown.js\",\"accounts-ui-bootstrap-3/login_buttons_dialogs.js\"],\"names\":[],\"mappings\":\";;;;;;;;AAAA,iB;AACA,mB;;AAEA,4B;AACA,0B;AACA,0B;AACA,I;AACA,C;;;AAGA,wC;AACA,0B;AACA,kE;AACA,0C;AACA,qC;AACA,iE;AACA,K;;AAEA,qC;AACA,qC;AACA,oB;AACA,mC;AACA,2B;AACA,oC;AACA,sB;AACA,kB;AACA,uC;AACA,oD;AACA,+F;AACA,U;AACA,iF;AACA,Y;AACA,wH;AACA,K;AACA,G;;AAEA,mC;AACA,mC;AACA,kE;AACA,6D;AACA,4G;AACA,6C;AACA,+F;AACA,c;AACA,iE;AACA,O;AACA,O;AACA,G;AACA,E;;AAEA,iD;AACA,mE;AACA,E;;;;;;;;;;;;;;;;;;ACpDA,izB;AACA,2U;AACA,8yB;AACA,2W;AACA,8N;AACA,ia;;;;;;;;;;;;;;;;;;;ACLA,iyB;AACA,+M;AACA,sW;;;;;;;;;;;;;;;;;;;ACFA,itB;AACA,8X;AACA,8Z;AACA,ulB;AACA,oY;AACA,onC;AACA,iiB;AACA,8L;AACA,6S;AACA,8Y;;;;;;;;;;;;;;;;;;;ACTA,omD;AACA,+qC;AACA,yU;AACA,8mD;AACA,qY;;;;;;;;;;;;;;;;;;;ACJA,c;AACA,oB;AACA,sB;;AAEA,6E;AACA,mB;AACA,2B;AACA,2B;AACA,wB;;AAEA,mB;AACA,kB;;AAEA,6C;AACA,yB;AACA,yB;AACA,wB;;AAEA,yC;AACA,6C;AACA,6C;AACA,I;;AAEA,oC;AACA,qC;AACA,oE;AACA,I;;AAEA,0C;;AAEA,oF;AACA,mC;AACA,+B;AACA,uB;AACA,2D;AACA,yH;;AAEA,4B;AACA,M;;AAEA,gC;AACA,2C;AACA,M;;AAEA,wB;AACA,uB;AACA,2C;AACA,M;;AAEA,gC;AACA,sC;AACA,8C;AACA,8C;AACA,2C;AACA,yC;AACA,2B;AACA,M;;AAEA,oC;AACA,sC;AACA,wC;AACA,kC;AACA,M;;AAEA,qC;AACA,yC;AACA,qC;AACA,kC;AACA,M;;AAEA,qE;AACA,yC;AACA,8C;AACA,yC;AACA,sC;AACA,M;;AAEA,qE;AACA,+D;AACA,mC;AACA,M;AACA,sE;AACA,2D;AACA,sE;AACA,iB;AACA,uC;AACA,yC;AACA,0C;AACA,M;;AAEA,gC;AACA,sC;AACA,qC;AACA,M;;AAEA,uC;AACA,2D;AACA,+D;AACA,gE;AACA,K;AACA,I;AACA,M;;;;;;;;;;;;;;;;;;ACrGA,c;AACA,8B;AACA,gC;;AAEA,oB;AACA,0D;;AAEA,4B;AACA,mB;AACA,wB;AACA,wC;AACA,kF;AACA,U;AACA,mF;AACA,O;;AAEA,4C;AACA,iC;AACA,+C;AACA,iC;AACA,4C;AACA,S;AACA,K;AACA,K;;AAEA,mC;AACA,yC;AACA,K;;AAEA,I;AACA,kC;AACA,I;;AAEA,0D;AACA,6C;AACA,I;;AAEA,0D;AACA,qD;AACA,I;;AAEA,+D;AACA,6D;AACA,8B;AACA,sB;AACA,sF;AACA,uB;AACA,I;;AAEA,qE;AACA,8C;AACA,I;;;AAGA,I;AACA,kC;AACA,I;;AAEA,kE;AACA,Y;AACA,yD;AACA,6C;AACA,I;;AAEA,4D;AACA,gD;AACA,I;;;;AAIA,I;AACA,iC;AACA,I;;AAEA,6D;AACA,mD;AACA,I;;AAEA,4D;AACA,kD;AACA,I;;AAEA,I;AACA,0C;AACA,I;;AAEA,iE;AACA,6C;AACA,I;;AAEA,I;AACA,Y;AACA,I;;AAEA,oD;AACA,6B;AACA,c;AACA,gB;;AAEA,0C;AACA,+B;AACA,sB;AACA,2B;AACA,gE;AACA,oC;;AAEA,c;AACA,I;;AAEA,yD;AACA,qC;AACA,kF;;AAEA,iE;AACA,0D;AACA,qB;AACA,oB;;AAEA,sD;AACA,kC;AACA,gC;;AAEA,2C;AACA,0B;AACA,O;AACA,I;;AAEA,2D;AACA,0C;AACA,I;;AAEA,iD;AACA,sE;AACA,I;;AAEA,oE;AACA,I;AACA,iE;AACA,wB;AACA,iE;AACA,+B;AACA,kB;AACA,Y;AACA,sF;AACA,mB;AACA,K;AACA,I;AACA,2D;AACA,8F;AACA,kB;;AAEA,yK;;AAEA,yB;AACA,kB;AACA,Y;AACA,wD;AACA,mB;AACA,K;AACA,I;AACA,iE;AACA,+B;AACA,kB;AACA,Y;AACA,sF;AACA,mB;AACA,K;AACA,I;;AAEA,K;;;;;;;;;;;;;;;;;;;ACzKA,c;AACA,oB;AACA,0D;;AAEA,2D;AACA,wC;AACA,kC;AACA,0C;AACA,qC;AACA,mB;AACA,8C;AACA,iE;AACA,uB;AACA,yD;AACA,4D;AACA,gB;AACA,0E;AACA,S;AACA,Q;;AAEA,2E;;AAEA,6D;AACA,+D;AACA,0F;;AAEA,0C;AACA,K;AACA,K;;AAEA,6E;AACA,8E;AACA,I;;AAEA,kF;AACA,+B;AACA,2E;AACA,sB;AACA,Q;AACA,mC;AACA,I;;AAEA,gF;AACA,iC;AACA,yC;AACA,sD;AACA,I;AACA,M;;;;;;;;;;;;;;;;;;AC/CA,c;;AAEA,oB;AACA,0D;;AAEA,4D;AACA,iC;AACA,iC;AACA,mG;AACA,8B;AACA,M;AACA,sE;AACA,8B;AACA,uD;AACA,qB;AACA,M;AACA,uC;AACA,0C;AACA,K;AACA,K;;;AAGA,I;AACA,sD;AACA,I;;AAEA,iD;AACA,kE;AACA,8B;AACA,0C;AACA,4D;AACA,qB;AACA,uB;AACA,K;AACA,K;;AAEA,oE;AACA,gD;AACA,I;;AAEA,6E;AACA,2D;AACA,I;;AAEA,0E;AACA,wD;AACA,I;;AAEA,wE;AACA,sD;AACA,I;;AAEA,qF;AACA,6E;AACA,8E;AACA,oF;AACA,M;AACA,6E;AACA,6B;AACA,sF;AACA,I;;;AAGA,I;AACA,uD;AACA,I;;AAEA,kD;AACA,kD;AACA,sB;AACA,M;;AAEA,yD;AACA,+B;AACA,yB;AACA,M;;AAEA,8D;AACA,8B;AACA,uB;AACA,M;;AAEA,4C;AACA,8B;AACA,0C;;AAEA,mE;AACA,+D;AACA,yD;AACA,+E;AACA,4E;AACA,wD;;AAEA,oD;AACA,6D;;AAEA,gF;AACA,qB;;AAEA,oD;AACA,4B;AACA,mE;AACA,8B;AACA,6D;AACA,wC;AACA,gD;AACA,4E;AACA,U;AACA,uE;AACA,M;AACA,qD;AACA,8B;AACA,0C;;AAEA,mE;AACA,yD;AACA,+E;;AAEA,qD;AACA,4D;;AAEA,gF;AACA,qB;AACA,yB;;AAEA,oD;AACA,yB;AACA,uE;AACA,wC;AACA,gD;AACA,mF;AACA,M;AACA,8C;AACA,0C;;AAEA,+D;AACA,wD;AACA,+F;;AAEA,qD;AACA,6D;;AAEA,gF;AACA,qB;;AAEA,oD;AACA,mE;AACA,iD;AACA,6D;AACA,4E;AACA,6D;AACA,qF;AACA,M;AACA,sK;AACA,+B;AACA,wB;AACA,K;AACA,K;;AAEA,mE;AACA,2E;AACA,6B;AACA,mB;AACA,Y;AACA,oD;AACA,2C;AACA,mE;AACA,4C;AACA,c;AACA,oC;AACA,O;AACA,K;AACA,I;;AAEA,yE;AACA,sD;AACA,I;;AAEA,4E;AACA,uD;AACA,I;;AAEA,qE;AACA,qD;AACA,I;;AAEA,8E;AACA,oC;AACA,I;;AAEA,6E;AACA,gE;AACA,I;;AAEA,+E;AACA,uD;AACA,I;;AAEA,uE;AACA,uB;AACA,uE;AACA,6B;AACA,2B;AACA,+F;AACA,gD;AACA,U;AACA,qD;AACA,6B;AACA,wE;AACA,U;AACA,mE;AACA,6B;AACA,qE;AACA,U;AACA,4E;AACA,6B;AACA,qB;AACA,S;AACA,M;;AAEA,wB;AACA,qD;AACA,6B;AACA,2B;AACA,+G;AACA,gD;AACA,U;AACA,mE;AACA,6B;AACA,2B;AACA,6E;AACA,gD;AACA,U;AACA,8E;AACA,6B;AACA,sF;AACA,U;AACA,4E;AACA,6B;AACA,qB;AACA,U;AACA,mE;AACA,6B;AACA,6B;AACA,gE;AACA,qE;AACA,uC;AACA,2B;AACA,yF;AACA,gD;AACA,S;AACA,M;;AAEA,gF;AACA,I;;AAEA,qF;AACA,2D;AACA,I;;AAEA,4E;AACA,wG;AACA,I;;AAEA,6E;AACA,mD;AACA,I;;AAEA,uF;AACA,sB;AACA,uG;AACA,2C;AACA,I;;AAEA,qF;AACA,0D;AACA,I;;AAEA,2D;AACA,oC;AACA,I;;;AAGA,I;AACA,wC;AACA,I;;AAEA,+C;AACA,gH;AACA,+B;AACA,yB;AACA,M;AACA,iE;AACA,8B;AACA,uB;AACA,K;AACA,K;;AAEA,6D;AACA,Y;AACA,wF;AACA,6B;AACA,qB;AACA,U;AACA,gF;AACA,6B;AACA,qB;AACA,U;AACA,uE;AACA,6B;AACA,6B;AACA,gE;AACA,qE;AACA,uC;AACA,2B;AACA,4D;AACA,gD;AACA,S;AACA,M;AACA,I;;;AAGA,I;AACA,Y;AACA,I;;AAEA,uC;AACA,8C;AACA,iB;AACA,kB;AACA,Q;AACA,2B;AACA,I;;AAEA,8C;AACA,8C;AACA,iB;AACA,kB;AACA,Q;AACA,8D;AACA,I;;AAEA,mC;AACA,gD;AACA,e;AACA,Q;AACA,c;AACA,I;;AAEA,2B;AACA,wC;;AAEA,6D;AACA,uD;AACA,6E;AACA,0E;AACA,sD;;AAEA,sB;AACA,4B;AACA,6D;AACA,e;AACA,U;AACA,6C;AACA,gC;AACA,uD;AACA,e;AACA,U;AACA,uC;AACA,0C;AACA,wF;AACA,+D;AACA,oE;AACA,e;AACA,U;AACA,wC;AACA,Y;AACA,kF;AACA,K;;AAEA,gF;AACA,kB;AACA,0E;AACA,c;AACA,4C;AACA,O;AACA,O;AACA,I;;AAEA,mC;AACA,gE;AACA,I;;AAEA,4B;AACA,wC;;AAEA,4D;;AAEA,6D;AACA,4B;AACA,6D;AACA,e;AACA,U;AACA,oC;AACA,K;;AAEA,uD;AACA,yB;AACA,uD;AACA,e;AACA,U;AACA,8B;AACA,K;;AAEA,0E;AACA,sD;AACA,2D;AACA,a;AACA,Q;AACA,kC;;AAEA,uC;AACA,a;;AAEA,mD;AACA,kB;AACA,0E;AACA,c;AACA,4C;AACA,O;AACA,O;AACA,I;;AAEA,oC;AACA,wC;;AAEA,iE;AACA,oC;AACA,gE;AACA,kB;AACA,4E;AACA,Y;AACA,wD;AACA,S;AACA,Y;AACA,oD;AACA,K;AACA,I;;AAEA,oC;AACA,wC;;AAEA,0E;AACA,6D;;AAEA,0E;AACA,sD;AACA,2D;AACA,a;;AAEA,uC;AACA,a;;AAEA,qE;AACA,kB;AACA,2E;AACA,c;AACA,4D;;AAEA,8C;AACA,sC;AACA,8C;AACA,iB;AACA,O;AACA,O;AACA,I;;AAEA,iD;AACA,0E;AACA,iE;AACA,iC;AACA,4E;AACA,wD;AACA,uC;AACA,kE;AACA,qB;AACA,O;AACA,K;AACA,gB;AACA,I;AACA,M;;;;;;;;;;;;;;;;;;;AC1eA,c;AACA,oB;AACA,0D;;;AAGA,I;AACA,6D;AACA,sE;AACA,qE;AACA,gD;AACA,I;;AAEA,qC;AACA,gF;AACA,G;;AAEA,qC;AACA,gF;AACA,G;;AAEA,qE;AACA,qE;AACA,mE;AACA,8B;AACA,qC;AACA,wE;AACA,oC;AACA,mB;AACA,6D;AACA,oD;AACA,S;AACA,K;AACA,K;;;AAGA,I;AACA,iC;AACA,I;AACA,uD;AACA,qE;AACA,mB;AACA,G;;AAEA,wC;AACA,+D;AACA,sB;AACA,M;AACA,+D;AACA,+B;AACA,wB;AACA,M;AACA,+D;AACA,0D;AACA,kC;AACA,6D;AACA,K;AACA,K;;AAEA,mC;AACA,wC;AACA,mF;AACA,8D;AACA,a;;AAEA,2B;AACA,iE;AACA,wB;AACA,oB;AACA,4E;AACA,gB;AACA,8D;AACA,sC;AACA,iE;AACA,S;AACA,S;AACA,I;;AAEA,mE;AACA,yD;AACA,I;;;AAGA,I;AACA,iC;AACA,I;;AAEA,wC;AACA,+D;AACA,sB;AACA,M;AACA,2D;AACA,+B;AACA,wB;AACA,M;AACA,sE;AACA,0D;AACA,kC;AACA,2B;AACA,K;AACA,K;;AAEA,uD;AACA,iE;AACA,mB;AACA,I;;AAEA,mC;AACA,wC;AACA,4E;AACA,2D;AACA,a;;AAEA,2B;AACA,8D;AACA,wB;AACA,oB;AACA,4E;AACA,gB;AACA,8D;AACA,sC;AACA,+B;AACA,S;AACA,S;AACA,I;;AAEA,mE;AACA,yD;AACA,I;;;AAGA,I;AACA,qC;AACA,I;;AAEA,4C;AACA,wD;AACA,0D;AACA,K;AACA,K;;AAEA,2D;AACA,wD;AACA,I;;;AAGA,I;AACA,wC;AACA,I;;AAEA,+C;AACA,0D;AACA,0C;AACA,K;AACA,K;;AAEA,8D;AACA,uG;AACA,4D;AACA,I;;;AAGA,I;AACA,yC;AACA,I;;AAEA,gD;AACA,kE;AACA,2E;AACA,M;AACA,6E;AACA,0E;AACA,iF;AACA,oE;AACA,4F;AACA,6B;AACA,8B;AACA,U;AACA,uD;AACA,kE;AACA,qE;AACA,gD;AACA,W;;AAEA,uC;AACA,sF;AACA,oB;AACA,mF;AACA,c;AACA,iF;AACA,W;AACA,O;AACA,M;AACA,+E;AACA,+E;AACA,0E;AACA,4C;AACA,qE;AACA,uE;AACA,0E;AACA,6B;AACA,K;AACA,K;;AAEA,qE;AACA,+D;AACA,8D;AACA,wC;AACA,sE;AACA,qC;AACA,yE;AACA,O;;AAEA,sF;AACA,I;;AAEA,mE;AACA,wD;AACA,mE;AACA,wF;AACA,gF;AACA,I;;AAEA,yC;AACA,mE;AACA,6B;AACA,I;;AAEA,2E;AACA,iC;AACA,I;;AAEA,+D;AACA,yE;AACA,I;;AAEA,0E;AACA,uC;AACA,6D;AACA,I;;AAEA,oE;AACA,8E;AACA,I;;;AAGA,gF;AACA,iC;AACA,yC;AACA,sD;AACA,I;;AAEA,M\",\"sourcesContent\":[\"if (!Accounts.ui)\\r\\n  Accounts.ui = {};\\r\\n\\r\\nif (!Accounts.ui._options) {\\r\\n  Accounts.ui._options = {\\r\\n    requestPermissions: {}\\r\\n  };\\r\\n}\\r\\n\\r\\n\\r\\nAccounts.ui.config = function(options) {\\r\\n  // validate options keys\\r\\n  var VALID_KEYS = ['passwordSignupFields', 'requestPermissions'];\\r\\n  _.each(_.keys(options), function (key) {\\r\\n    if (!_.contains(VALID_KEYS, key))\\r\\n      throw new Error(\\\"Accounts.ui.config: Invalid key: \\\" + key);\\r\\n  });\\r\\n\\r\\n  // deal with `passwordSignupFields`\\r\\n  if (options.passwordSignupFields) {\\r\\n    if (_.contains([\\r\\n      \\\"USERNAME_AND_EMAIL_CONFIRM\\\",\\r\\n      \\\"USERNAME_AND_EMAIL\\\",\\r\\n      \\\"USERNAME_AND_OPTIONAL_EMAIL\\\",\\r\\n      \\\"USERNAME_ONLY\\\",\\r\\n      \\\"EMAIL_ONLY\\\"\\r\\n    ], options.passwordSignupFields)) {\\r\\n      if (Accounts.ui._options.passwordSignupFields)\\r\\n        throw new Error(\\\"Accounts.ui.config: Can't set `passwordSignupFields` more than once\\\");\\r\\n      else\\r\\n        Accounts.ui._options.passwordSignupFields = options.passwordSignupFields;\\r\\n    } else {\\r\\n      throw new Error(\\\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \\\" + options.passwordSignupFields);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // deal with `requestPermissions`\\r\\n  if (options.requestPermissions) {\\r\\n    _.each(options.requestPermissions, function (scope, service) {\\r\\n      if (Accounts.ui._options.requestPermissions[service]) {\\r\\n        throw new Error(\\\"Accounts.ui.config: Can't set `requestPermissions` more than once for \\\" + service);\\r\\n      } else if (!(scope instanceof Array)) {\\r\\n        throw new Error(\\\"Accounts.ui.config: Value for `requestPermissions` must be an array\\\");\\r\\n      } else {\\r\\n        Accounts.ui._options.requestPermissions[service] = scope;\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n};\\r\\n\\r\\nAccounts.ui._passwordSignupFields = function () {\\r\\n  return Accounts.ui._options.passwordSignupFields || \\\"EMAIL_ONLY\\\";\\r\\n};\",\"Template.__define__(\\\"_loginButtons\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<!--<div id=\\\\\\\"login-buttons\\\\\\\" class=\\\\\\\"login-buttons-dropdown-align-\\\",[\\\"{\\\",[[0,\\\"align\\\"]]],\\\"\\\\\\\">\\\\r\\\\n-->\\\\r\\\\n<ul id=\\\\\\\"login-buttons\\\\\\\" class=\\\\\\\"login-buttons-dropdown-align-\\\",[\\\"{\\\",[[0,\\\"align\\\"]]],\\\"\\\\\\\">\\\\r\\\\n  \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"currentUser\\\"]],[\\\"\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"loggingIn\\\"]],[\\\"\\\\r\\\\n      \\\",\\\"\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"dropdown\\\"]],[\\\"\\\\r\\\\n        \\\",[\\\">\\\",\\\"_loginButtonsLoggingIn\\\"],\\\"\\\\r\\\\n      \\\"],[\\\"\\\\r\\\\n        <div class=\\\\\\\"login-buttons-with-only-one-button\\\\\\\">\\\\r\\\\n          \\\",[\\\">\\\",\\\"_loginButtonsLoggingInSingleLoginButton\\\"],\\\"\\\\r\\\\n        </div>\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n    \\\"],[\\\"\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsLoggedIn\\\"],\\\"\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n  \\\"],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsLoggedOut\\\"],\\\"\\\\r\\\\n  \\\"]],\\\"\\\\r\\\\n<!--  </div>\\\\r\\\\n -->\\\\r\\\\n  </ul>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedIn\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"dropdown\\\"]],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsLoggedInDropdown\\\"],\\\"\\\\r\\\\n  \\\"],[\\\"\\\\r\\\\n    <div class=\\\\\\\"login-buttons-with-only-one-button\\\\\\\">\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsLoggedInSingleLogoutButton\\\"],\\\"\\\\r\\\\n    </div>\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsLoggedOut\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"services\\\"]],[\\\" \\\",\\\"\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"configurationLoaded\\\"]],[\\\"\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"dropdown\\\"]],[\\\" \\\",\\\"\\\\r\\\\n        \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutDropdown\\\"],\\\"\\\\r\\\\n      \\\"],[\\\"\\\\r\\\\n        \\\",[\\\"#\\\",[[0,\\\"with\\\"],[0,\\\"singleService\\\"]],[\\\" \\\",\\\"\\\\r\\\\n          <div class=\\\\\\\"login-buttons-with-only-one-button\\\\\\\">\\\\r\\\\n            \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"loggingIn\\\"]],[\\\"\\\\r\\\\n              \\\",[\\\">\\\",\\\"_loginButtonsLoggingInSingleLoginButton\\\"],\\\"\\\\r\\\\n            \\\"],[\\\"\\\\r\\\\n              \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutSingleLoginButton\\\"],\\\"\\\\r\\\\n            \\\"]],\\\"\\\\r\\\\n          </div>\\\\r\\\\n        \\\"]],\\\"\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n  \\\"],[\\\"\\\\r\\\\n    <div class=\\\\\\\"no-services\\\\\\\">No login services configured</div>\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsMessages\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"errorMessage\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"alert alert-danger\\\\\\\">\\\",[\\\"{\\\",[[0,\\\"errorMessage\\\"]]],\\\"</div>\\\\r\\\\n  \\\"]],\\\"\\\\r\\\\n  \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"infoMessage\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"alert alert-success no-margin\\\\\\\">\\\",[\\\"{\\\",[[0,\\\"infoMessage\\\"]]],\\\"</div>\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsLoggingIn\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\">\\\",\\\"_loginButtonsLoggingInPadding\\\"],\\\"\\\\r\\\\n  <div class=\\\\\\\"loading\\\\\\\">&nbsp;</div>\\\\r\\\\n  \\\",[\\\">\\\",\\\"_loginButtonsLoggingInPadding\\\"]]));\\nTemplate.__define__(\\\"_loginButtonsLoggingInPadding\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"unless\\\"],[0,\\\"dropdown\\\"]],[\\\"\\\\r\\\\n    \\\",\\\"\\\\r\\\\n    <div class=\\\\\\\"login-buttons-padding\\\\\\\">\\\\r\\\\n      <div class=\\\\\\\"login-button single-login-button\\\\\\\" style=\\\\\\\"visibility: hidden;\\\\\\\" id=\\\\\\\"login-buttons-logout\\\\\\\">&nbsp;</div>\\\\r\\\\n    </div>\\\\r\\\\n  \\\"],[\\\"\\\\r\\\\n    \\\",\\\"\\\\r\\\\n    <div class=\\\\\\\"login-buttons-padding\\\\\\\" />\\\\r\\\\n  \\\"]]]));\\n\",\"Template.__define__(\\\"_loginButtonsLoggedOutSingleLoginButton\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<div class=\\\\\\\"login-text-and-button\\\\\\\">\\\\r\\\\n    <div class=\\\\\\\"login-button single-login-button \\\",[\\\"#\\\",[[0,\\\"unless\\\"],[0,\\\"configured\\\"]],[\\\"configure-button\\\"]],\\\"\\\\\\\"\\\\r\\\\n         id=\\\\\\\"login-buttons-\\\",[\\\"{\\\",[[0,\\\"name\\\"]]],\\\"\\\\\\\">\\\\r\\\\n      <div class=\\\\\\\"login-image\\\\\\\" id=\\\\\\\"login-buttons-image-\\\",[\\\"{\\\",[[0,\\\"name\\\"]]],\\\"\\\\\\\"></div>\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"configured\\\"]],[\\\"\\\\r\\\\n        <span class=\\\\\\\"text-besides-image sign-in-text-\\\",[\\\"{\\\",[[0,\\\"name\\\"]]],\\\"\\\\\\\">Sign in with \\\",[\\\"{\\\",[[0,\\\"capitalizedName\\\"]]],\\\"</span>\\\\r\\\\n      \\\"],[\\\"\\\\r\\\\n        <span class=\\\\\\\"text-besides-image configure-text-\\\",[\\\"{\\\",[[0,\\\"name\\\"]]],\\\"\\\\\\\">Configure \\\",[\\\"{\\\",[[0,\\\"capitalizedName\\\"]]],\\\" Login</span>\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n    </div>\\\\r\\\\n  </div>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggingInSingleLoginButton\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<div class=\\\\\\\"login-text-and-button\\\\\\\">\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsLoggingIn\\\"],\\\"\\\\r\\\\n  </div>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedInSingleLogoutButton\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<div class=\\\\\\\"login-text-and-button\\\\\\\">\\\\r\\\\n    <div class=\\\\\\\"login-display-name\\\\\\\">\\\\r\\\\n      \\\",[\\\"{\\\",[[0,\\\"displayName\\\"]]],\\\"\\\\r\\\\n    </div>\\\\r\\\\n    <div class=\\\\\\\"login-button single-login-button\\\\\\\" id=\\\\\\\"login-buttons-logout\\\\\\\">Sign Out</div>\\\\r\\\\n  </div>\\\"]));\\n\",\"Template.__define__(\\\"_loginButtonsLoggedInDropdown\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<li id=\\\\\\\"login-dropdown-list\\\\\\\" class=\\\\\\\"dropdown\\\\\\\">\\\\r\\\\n    <a class=\\\\\\\"dropdown-toggle\\\\\\\" href=\\\\\\\"#\\\\\\\" data-toggle=\\\\\\\"dropdown\\\\\\\">\\\\r\\\\n      \\\",[\\\"{\\\",[[0,\\\"displayName\\\"]]],\\\"\\\\r\\\\n      <b class=\\\\\\\"caret\\\\\\\"></b>\\\\r\\\\n    </a>\\\\r\\\\n    <div class=\\\\\\\"dropdown-menu col-sm-3\\\\\\\">\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inMessageOnlyFlow\\\"]],[\\\"\\\\r\\\\n        \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n      \\\"],[\\\"\\\\r\\\\n        \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inChangePasswordFlow\\\"]],[\\\"\\\\r\\\\n          \\\",[\\\">\\\",\\\"_loginButtonsChangePassword\\\"],\\\"\\\\r\\\\n        \\\"],[\\\"\\\\r\\\\n          \\\",[\\\">\\\",\\\"_loginButtonsLoggedInDropdownActions\\\"],\\\"\\\\r\\\\n        \\\"]],\\\"\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n    </div>\\\\r\\\\n  </li>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedInDropdownActions\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"allowChangingPassword\\\"]],[\\\"\\\\r\\\\n    <button class=\\\\\\\"btn btn-default btn-block\\\\\\\" id=\\\\\\\"login-buttons-open-change-password\\\\\\\">Change password</button>\\\\r\\\\n  \\\"]],\\\"\\\\r\\\\n  <button class=\\\\\\\"btn btn-block btn-primary\\\\\\\" id=\\\\\\\"login-buttons-logout\\\\\\\">Sign out</button>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedOutDropdown\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<li id=\\\\\\\"login-dropdown-list\\\\\\\" class=\\\\\\\"dropdown\\\\\\\">\\\\r\\\\n    <a class=\\\\\\\"dropdown-toggle\\\\\\\" href=\\\\\\\"#\\\\\\\" data-toggle=\\\\\\\"dropdown\\\\\\\">\\\\r\\\\n      Sign In / Up\\\\r\\\\n      <b class=\\\\\\\"caret\\\\\\\"></b>\\\\r\\\\n    </a>\\\\r\\\\n    <div class=\\\\\\\"dropdown-menu\\\\\\\">\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutAllServices\\\"],\\\"\\\\r\\\\n    </div>\\\\r\\\\n  </li>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedOutAllServices\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"each\\\"],[0,\\\"services\\\"]],[\\\"\\\\r\\\\n  \\\",[\\\"#\\\",[[0,\\\"unless\\\"],[0,\\\"hasPasswordService\\\"]],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n  \\\"]],\\\"\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"isPasswordService\\\"]],[\\\"\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"hasOtherServices\\\"]],[\\\" \\\",\\\"\\\\r\\\\n        \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutPasswordServiceSeparator\\\"],\\\"\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutPasswordService\\\"],\\\"\\\\r\\\\n    \\\"],[\\\"\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsLoggedOutSingleLoginButton\\\"],\\\"\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsLoggedOutPasswordServiceSeparator\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<div class=\\\\\\\"or\\\\\\\">\\\\r\\\\n    <span class=\\\\\\\"hline\\\\\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\\\r\\\\n    <span class=\\\\\\\"or-text\\\\\\\">or</span>\\\\r\\\\n    <span class=\\\\\\\"hline\\\\\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\\\r\\\\n  </div>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsLoggedOutPasswordService\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inForgotPasswordFlow\\\"]],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_forgotPasswordForm\\\"],\\\"\\\\r\\\\n  \\\"],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"each\\\"],[0,\\\"fields\\\"]],[\\\"\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsFormField\\\"],\\\"\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n    <button class=\\\\\\\"btn btn-primary col-sm-12\\\\\\\" id=\\\\\\\"login-buttons-password\\\\\\\" type=\\\\\\\"button\\\\\\\">\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inSignupFlow\\\"]],[\\\"\\\\r\\\\n        Create\\\\r\\\\n      \\\"],[\\\"\\\\r\\\\n        Sign in\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n    </button>\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inLoginFlow\\\"]],[\\\"\\\\r\\\\n      <div id=\\\\\\\"login-other-options\\\\\\\">\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"showForgotPasswordLink\\\"]],[\\\"\\\\r\\\\n        <a id=\\\\\\\"forgot-password-link\\\\\\\" class=\\\\\\\"pull-left\\\\\\\" href=\\\\\\\"#\\\\\\\">Forgot password?</a>\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n      \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"showCreateAccountLink\\\"]],[\\\"\\\\r\\\\n        <a id=\\\\\\\"signup-link\\\\\\\" class=\\\\\\\"pull-right\\\\\\\" href=\\\\\\\"#\\\\\\\">Create account</a>\\\\r\\\\n      \\\"]],\\\"\\\\r\\\\n      </div>\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n    \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inSignupFlow\\\"]],[\\\"\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsBackToLoginLink\\\"],\\\"\\\\r\\\\n    \\\"]],\\\"\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_forgotPasswordForm\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<div class=\\\\\\\"login-form\\\\\\\">\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n    <div id=\\\\\\\"forgot-password-email-label-and-input\\\\\\\"> \\\",\\\"\\\\r\\\\n      <input id=\\\\\\\"forgot-password-email\\\\\\\" type=\\\\\\\"email\\\\\\\" placeholder=\\\\\\\"E-mail\\\\\\\" class=\\\\\\\"form-control\\\\\\\" />\\\\r\\\\n    </div>\\\\r\\\\n    <button class=\\\\\\\"btn btn-primary login-button-form-submit col-sm-12\\\\\\\" id=\\\\\\\"login-buttons-forgot-password\\\\\\\">Reset password</button>\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsBackToLoginLink\\\"],\\\"\\\\r\\\\n  </div>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsBackToLoginLink\\\",Package.handlebars.Handlebars.json_ast_to_func([\\\"<button id=\\\\\\\"back-to-login-link\\\\\\\" class=\\\\\\\"btn btn-default col-sm-12\\\\\\\">Cancel</button>\\\"]));\\nTemplate.__define__(\\\"_loginButtonsFormField\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"visible\\\"]],[\\\"\\\\r\\\\n    <input id=\\\\\\\"login-\\\",[\\\"{\\\",[[0,\\\"fieldName\\\"]]],\\\"\\\\\\\" type=\\\\\\\"\\\",[\\\"{\\\",[[0,\\\"inputType\\\"]]],\\\"\\\\\\\" placeholder=\\\\\\\"\\\",[\\\"{\\\",[[0,\\\"fieldLabel\\\"]]],\\\"\\\\\\\" class=\\\\\\\"form-control\\\\\\\" />\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsChangePassword\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n  \\\",[\\\"#\\\",[[0,\\\"each\\\"],[0,\\\"fields\\\"]],[\\\"\\\\r\\\\n    \\\",[\\\">\\\",\\\"_loginButtonsFormField\\\"],\\\"\\\\r\\\\n  \\\"]],\\\"\\\\r\\\\n  <button class=\\\\\\\"btn btn-primary\\\\\\\" id=\\\\\\\"login-buttons-do-change-password\\\\\\\">Change password</button>\\\\r\\\\n  <button class=\\\\\\\"btn btn-default login-close\\\\\\\">Close</button>\\\"]));\\n\",\"Meteor.startup(function(){document.body.appendChild(Spark.render(Template.__define__(null,Package.handlebars.Handlebars.json_ast_to_func([[\\\">\\\",\\\"_resetPasswordDialog\\\"],\\\"\\\\r\\\\n  \\\",[\\\">\\\",\\\"_enrollAccountDialog\\\"],\\\"\\\\r\\\\n  \\\",[\\\">\\\",\\\"_justVerifiedEmailDialog\\\"],\\\"\\\\r\\\\n  \\\",[\\\">\\\",\\\"_configureLoginServiceDialog\\\"],\\\"\\\\r\\\\n\\\\r\\\\n  <!-- if we're not showing a dropdown, we need some other place to show messages -->\\\\r\\\\n  \\\",[\\\">\\\",\\\"_loginButtonsMessagesDialog\\\"]]))));});Template.__define__(\\\"_resetPasswordDialog\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inResetPasswordFlow\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"modal\\\\\\\" id=\\\\\\\"login-buttons-reset-password-modal\\\\\\\">\\\\r\\\\n      <div class=\\\\\\\"modal-dialog\\\\\\\">\\\\r\\\\n        <div class=\\\\\\\"modal-content\\\\\\\">\\\\r\\\\n          <div class=\\\\\\\"modal-header\\\\\\\">\\\\r\\\\n            <button type=\\\\\\\"button\\\\\\\" class=\\\\\\\"close\\\\\\\" data-dismiss=\\\\\\\"modal\\\\\\\" aria-hidden=\\\\\\\"true\\\\\\\">&times;</button>\\\\r\\\\n            <h4 class=\\\\\\\"modal-title\\\\\\\">Reset your password</h4>\\\\r\\\\n          </div>\\\\r\\\\n          <div class=\\\\\\\"modal-body\\\\\\\">\\\\r\\\\n            <input id=\\\\\\\"reset-password-new-password\\\\\\\" class=\\\\\\\"form-control\\\\\\\" type=\\\\\\\"password\\\\\\\" placeholder=\\\\\\\"New Password\\\\\\\"/>\\\\r\\\\n            \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n          </div>\\\\r\\\\n          <div class=\\\\\\\"modal-footer\\\\\\\">\\\\r\\\\n            <a class=\\\\\\\"btn btn-default\\\\\\\" id=\\\\\\\"login-buttons-cancel-reset-password\\\\\\\">Close</a>\\\\r\\\\n            <button class=\\\\\\\"btn btn-primary\\\\\\\" id=\\\\\\\"login-buttons-reset-password-button\\\\\\\">\\\\r\\\\n              Set password\\\\r\\\\n            </button>\\\\r\\\\n          </div>\\\\r\\\\n        </div><!-- /.modal-content -->\\\\r\\\\n      </div><!-- /.modal-dalog -->\\\\r\\\\n    </div><!-- /.modal -->\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_enrollAccountDialog\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"inEnrollAccountFlow\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"modal\\\\\\\" id=\\\\\\\"login-buttons-enroll-account-modal\\\\\\\">\\\\r\\\\n      <div class=\\\\\\\"modal-dialog\\\\\\\">\\\\r\\\\n        <div class=\\\\\\\"modal-content\\\\\\\">\\\\r\\\\n          <div class=\\\\\\\"modal-header\\\\\\\">\\\\r\\\\n            <button type=\\\\\\\"button\\\\\\\" class=\\\\\\\"close\\\\\\\" data-dismiss=\\\\\\\"modal\\\\\\\" aria-hidden=\\\\\\\"true\\\\\\\">&times;</button>\\\\r\\\\n            <h4 class=\\\\\\\"modal-title\\\\\\\">Choose a password</h4>\\\\r\\\\n          </div>\\\\r\\\\n          <div class=\\\\\\\"modal-body\\\\\\\">\\\\r\\\\n            <input id=\\\\\\\"enroll-account-password\\\\\\\" class=\\\\\\\"form-control\\\\\\\" type=\\\\\\\"password\\\\\\\" placeholder=\\\\\\\"New Password\\\\\\\" />\\\\r\\\\n            \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n          </div>\\\\r\\\\n          <div class=\\\\\\\"modal-footer\\\\\\\">\\\\r\\\\n            <a class=\\\\\\\"btn btn-default\\\\\\\" id=\\\\\\\"login-buttons-cancel-enroll-account-button\\\\\\\">Close</a>\\\\r\\\\n            <button class=\\\\\\\"btn btn-primary\\\\\\\" id=\\\\\\\"login-buttons-enroll-account-button\\\\\\\">\\\\r\\\\n              Set password\\\\r\\\\n            </button>\\\\r\\\\n          </div>\\\\r\\\\n        </div><!-- /.modal-content -->\\\\r\\\\n      </div><!-- /.modal-dalog -->\\\\r\\\\n    </div><!-- /.modal -->\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_justVerifiedEmailDialog\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"visible\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"accounts-dialog accounts-centered-dialog\\\\\\\">\\\\r\\\\n      Email verified\\\\r\\\\n      <div class=\\\\\\\"login-button\\\\\\\" id=\\\\\\\"just-verified-dismiss-button\\\\\\\">Dismiss</div>\\\\r\\\\n    </div>\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_configureLoginServiceDialog\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"visible\\\"]],[\\\"\\\\r\\\\n    <div id=\\\\\\\"configure-login-service-dialog\\\\\\\" class=\\\\\\\"accounts-dialog accounts-centered-dialog\\\\\\\">\\\\r\\\\n      \\\",[\\\"!\\\",[[0,\\\"configurationSteps\\\"]]],\\\"\\\\r\\\\n      <p>\\\\r\\\\n        Now, copy over some details.\\\\r\\\\n      </p>\\\\r\\\\n      <p>\\\\r\\\\n        <table>\\\\r\\\\n          <colgroup>\\\\r\\\\n            <col span=\\\\\\\"1\\\\\\\" class=\\\\\\\"configuration_labels\\\\\\\">\\\\r\\\\n            <col span=\\\\\\\"1\\\\\\\" class=\\\\\\\"configuration_inputs\\\\\\\">\\\\r\\\\n          </colgroup>\\\\r\\\\n          \\\",[\\\"#\\\",[[0,\\\"each\\\"],[0,\\\"configurationFields\\\"]],[\\\"\\\\r\\\\n            <tr>\\\\r\\\\n              <td>\\\\r\\\\n                <label for=\\\\\\\"configure-login-service-dialog-\\\",[\\\"{\\\",[[0,\\\"property\\\"]]],\\\"\\\\\\\">\\\",[\\\"{\\\",[[0,\\\"label\\\"]]],\\\"</label>\\\\r\\\\n              </td>\\\\r\\\\n              <td>\\\\r\\\\n                <input id=\\\\\\\"configure-login-service-dialog-\\\",[\\\"{\\\",[[0,\\\"property\\\"]]],\\\"\\\\\\\" type=\\\\\\\"text\\\\\\\" />\\\\r\\\\n              </td>\\\\r\\\\n            </tr>\\\\r\\\\n          \\\"]],\\\"\\\\r\\\\n        </table>\\\\r\\\\n      </p>\\\\r\\\\n      <div class=\\\\\\\"new-section\\\\\\\">\\\\r\\\\n        <div class=\\\\\\\"login-button configure-login-service-dismiss-button\\\\\\\">\\\\r\\\\n          I'll do this later\\\\r\\\\n        </div>\\\\r\\\\n        <a class=\\\\\\\"accounts-close configure-login-service-dismiss-button\\\\\\\">&times;</a>\\\\r\\\\n\\\\r\\\\n        \\\",[\\\"#\\\",[[0,\\\"isolate\\\"]],[\\\"\\\\r\\\\n          <div class=\\\\\\\"login-button login-button-configure \\\",[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"saveDisabled\\\"]],[\\\"login-button-disabled\\\"]],\\\"\\\\\\\"\\\\r\\\\n             id=\\\\\\\"configure-login-service-dialog-save-configuration\\\\\\\">\\\\r\\\\n            Save Configuration\\\\r\\\\n          </div>\\\\r\\\\n        \\\"]],\\\"\\\\r\\\\n      </div>\\\\r\\\\n    </div>\\\\r\\\\n  \\\"]]]));\\nTemplate.__define__(\\\"_loginButtonsMessagesDialog\\\",Package.handlebars.Handlebars.json_ast_to_func([[\\\"#\\\",[[0,\\\"if\\\"],[0,\\\"visible\\\"]],[\\\"\\\\r\\\\n    <div class=\\\\\\\"accounts-dialog accounts-centered-dialog\\\\\\\" id=\\\\\\\"login-buttons-message-dialog\\\\\\\">\\\\r\\\\n      \\\",[\\\">\\\",\\\"_loginButtonsMessages\\\"],\\\"\\\\r\\\\n      <div class=\\\\\\\"login-button\\\\\\\" id=\\\\\\\"messages-dialog-dismiss-button\\\\\\\">Dismiss</div>\\\\r\\\\n    </div>\\\\r\\\\n  \\\"]]]));\\n\",\"(function () {\\r\\n  var VALID_KEYS = [\\r\\n    'dropdownVisible',\\r\\n\\r\\n    // XXX consider replacing these with one key that has an enum for values.\\r\\n    'inSignupFlow',\\r\\n    'inForgotPasswordFlow',\\r\\n    'inChangePasswordFlow',\\r\\n    'inMessageOnlyFlow',\\r\\n\\r\\n    'errorMessage',\\r\\n    'infoMessage',\\r\\n\\r\\n    // dialogs with messages (info and error)\\r\\n    'resetPasswordToken',\\r\\n    'enrollAccountToken',\\r\\n    'justVerifiedEmail',\\r\\n\\r\\n    'configureLoginServiceDialogVisible',\\r\\n    'configureLoginServiceDialogServiceName',\\r\\n    'configureLoginServiceDialogSaveDisabled'\\r\\n  ];\\r\\n\\r\\n  var validateKey = function (key) {\\r\\n    if (!_.contains(VALID_KEYS, key))\\r\\n      throw new Error(\\\"Invalid key in loginButtonsSession: \\\" + key);\\r\\n  };\\r\\n\\r\\n  var KEY_PREFIX = \\\"Meteor.loginButtons.\\\";\\r\\n\\r\\n  // XXX we should have a better pattern for code private to a package like this one\\r\\n  Accounts._loginButtonsSession = {\\r\\n    set: function(key, value) {\\r\\n      validateKey(key);\\r\\n      if (_.contains(['errorMessage', 'infoMessage'], key))\\r\\n        throw new Error(\\\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\\\");\\r\\n\\r\\n      this._set(key, value);\\r\\n    },\\r\\n\\r\\n    _set: function(key, value) {\\r\\n      Session.set(KEY_PREFIX + key, value);\\r\\n    },\\r\\n\\r\\n    get: function(key) {\\r\\n      validateKey(key);\\r\\n      return Session.get(KEY_PREFIX + key);\\r\\n    },\\r\\n\\r\\n    closeDropdown: function () {\\r\\n      this.set('inSignupFlow', false);\\r\\n      this.set('inForgotPasswordFlow', false);\\r\\n      this.set('inChangePasswordFlow', false);\\r\\n      this.set('inMessageOnlyFlow', false);\\r\\n      this.set('dropdownVisible', false);\\r\\n      this.resetMessages();\\r\\n    },\\r\\n\\r\\n    infoMessage: function(message) {\\r\\n      this._set(\\\"errorMessage\\\", null);\\r\\n      this._set(\\\"infoMessage\\\", message);\\r\\n      this.ensureMessageVisible();\\r\\n    },\\r\\n\\r\\n    errorMessage: function(message) {\\r\\n      this._set(\\\"errorMessage\\\", message);\\r\\n      this._set(\\\"infoMessage\\\", null);\\r\\n      this.ensureMessageVisible();\\r\\n    },\\r\\n\\r\\n    // is there a visible dialog that shows messages (info and error)\\r\\n    isMessageDialogVisible: function () {\\r\\n      return this.get('resetPasswordToken') ||\\r\\n        this.get('enrollAccountToken') ||\\r\\n        this.get('justVerifiedEmail');\\r\\n    },\\r\\n\\r\\n    // ensure that somethings displaying a message (info or error) is\\r\\n    // visible.  if a dialog with messages is open, do nothing;\\r\\n    // otherwise open the dropdown.\\r\\n    //\\r\\n    // notably this doesn't matter when only displaying a single login\\r\\n    // button since then we have an explicit message dialog\\r\\n    // (_loginButtonsMessageDialog), and dropdownVisible is ignored in\\r\\n    // this case.\\r\\n    ensureMessageVisible: function () {\\r\\n      if (!this.isMessageDialogVisible())\\r\\n        this.set(\\\"dropdownVisible\\\", true);\\r\\n    },\\r\\n\\r\\n    resetMessages: function () {\\r\\n      this._set(\\\"errorMessage\\\", null);\\r\\n      this._set(\\\"infoMessage\\\", null);\\r\\n    },\\r\\n\\r\\n    configureService: function (name) {\\r\\n      this.set('configureLoginServiceDialogVisible', true);\\r\\n      this.set('configureLoginServiceDialogServiceName', name);\\r\\n      this.set('configureLoginServiceDialogSaveDisabled', true);\\r\\n    }\\r\\n  };\\r\\n}) ();\",\"(function () {\\r\\n  if (!Accounts._loginButtons)\\r\\n    Accounts._loginButtons = {};\\r\\n\\r\\n  // for convenience\\r\\n  var loginButtonsSession = Accounts._loginButtonsSession;\\r\\n\\r\\n  Handlebars.registerHelper(\\r\\n    \\\"loginButtons\\\",\\r\\n    function (options) {\\r\\n      if (options.hash.align === \\\"left\\\")\\r\\n        return new Handlebars.SafeString(Template._loginButtons({align: \\\"left\\\"}));\\r\\n      else\\r\\n        return new Handlebars.SafeString(Template._loginButtons({align: \\\"right\\\"}));\\r\\n    });\\r\\n\\r\\n  // shared between dropdown and single mode\\r\\n  Template._loginButtons.events({\\r\\n    'click #login-buttons-logout': function() {\\r\\n      Meteor.logout(function () {\\r\\n        loginButtonsSession.closeDropdown();\\r\\n      });\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._loginButtons.preserve({\\r\\n    'input[id]': Spark._labelFromIdOrName\\r\\n  });\\r\\n\\r\\n  //\\r\\n  // loginButtonLoggedOut template\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsLoggedOut.dropdown = function () {\\r\\n    return Accounts._loginButtons.dropdown();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOut.services = function () {\\r\\n    return Accounts._loginButtons.getLoginServices();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOut.singleService = function () {\\r\\n    var services = Accounts._loginButtons.getLoginServices();\\r\\n    if (services.length !== 1)\\r\\n      throw new Error(\\r\\n        \\\"Shouldn't be rendering this template with more than one configured service\\\");\\r\\n    return services[0];\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOut.configurationLoaded = function () {\\r\\n    return Accounts.loginServicesConfigured();\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsLoggedIn template\\r\\n  //\\r\\n\\r\\n  // decide whether we should show a dropdown rather than a row of\\r\\n  // buttons\\r\\n  Template._loginButtonsLoggedIn.dropdown = function () {\\r\\n    return Accounts._loginButtons.dropdown();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedIn.displayName = function () {\\r\\n    return Accounts._loginButtons.displayName();\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsMessage template\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsMessages.errorMessage = function () {\\r\\n    return loginButtonsSession.get('errorMessage');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsMessages.infoMessage = function () {\\r\\n    return loginButtonsSession.get('infoMessage');\\r\\n  };\\r\\n\\r\\n  //\\r\\n  // loginButtonsLoggingInPadding template\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsLoggingInPadding.dropdown = function () {\\r\\n    return Accounts._loginButtons.dropdown();\\r\\n  };\\r\\n\\r\\n  //\\r\\n  // helpers\\r\\n  //\\r\\n\\r\\n  Accounts._loginButtons.displayName = function () {\\r\\n    var user = Meteor.user();\\r\\n    if (!user)\\r\\n      return '';\\r\\n\\r\\n    if (user.profile && user.profile.name)\\r\\n      return user.profile.name;\\r\\n    if (user.username)\\r\\n      return user.username;\\r\\n    if (user.emails && user.emails[0] && user.emails[0].address)\\r\\n      return user.emails[0].address;\\r\\n\\r\\n    return '';\\r\\n  };\\r\\n\\r\\n  Accounts._loginButtons.getLoginServices = function () {\\r\\n    // First look for OAuth services.\\r\\n    var services = Package['accounts-oauth'] ? Accounts.oauth.serviceNames() : [];\\r\\n\\r\\n    // Be equally kind to all login services. This also preserves\\r\\n    // backwards-compatibility. (But maybe order should be\\r\\n    // configurable?)\\r\\n    services.sort();\\r\\n\\r\\n    // Add password, if it's there; it must come last.\\r\\n    if (this.hasPasswordService())\\r\\n      services.push('password');\\r\\n\\r\\n    return _.map(services, function(name) {\\r\\n      return {name: name};\\r\\n    });\\r\\n  };\\r\\n\\r\\n  Accounts._loginButtons.hasPasswordService = function () {\\r\\n    return !!Package['accounts-password'];\\r\\n  };\\r\\n\\r\\n  Accounts._loginButtons.dropdown = function () {\\r\\n    return this.hasPasswordService() || getLoginServices().length > 1;\\r\\n  };\\r\\n\\r\\n  // XXX improve these. should this be in accounts-password instead?\\r\\n  //\\r\\n  // XXX these will become configurable, and will be validated on\\r\\n  // the server as well.\\r\\n  Accounts._loginButtons.validateUsername = function (username) {\\r\\n    if (username.length >= 3) {\\r\\n      return true;\\r\\n    } else {\\r\\n      loginButtonsSession.errorMessage(\\\"Username must be at least 3 characters long\\\");\\r\\n      return false;\\r\\n    }\\r\\n  };\\r\\n  Accounts._loginButtons.validateEmail = function (email) {\\r\\n    if (Accounts.ui._passwordSignupFields() === \\\"USERNAME_AND_OPTIONAL_EMAIL\\\" && email === '')\\r\\n      return true;\\r\\n\\r\\n    var re = /^(([^<>()[\\\\]\\\\\\\\.,;:\\\\s@\\\\\\\"]+(\\\\.[^<>()[\\\\]\\\\\\\\.,;:\\\\s@\\\\\\\"]+)*)|(\\\\\\\".+\\\\\\\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$/;\\r\\n\\r\\n    if (re.test(email)) {\\r\\n      return true;\\r\\n    } else {\\r\\n      loginButtonsSession.errorMessage(\\\"Invalid email\\\");\\r\\n      return false;\\r\\n    }\\r\\n  };\\r\\n  Accounts._loginButtons.validatePassword = function (password) {\\r\\n    if (password.length >= 6) {\\r\\n      return true;\\r\\n    } else {\\r\\n      loginButtonsSession.errorMessage(\\\"Password must be at least 6 characters long\\\");\\r\\n      return false;\\r\\n    }\\r\\n  };\\r\\n\\r\\n})();\\r\\n\",\"(function () {\\r\\n  // for convenience\\r\\n  var loginButtonsSession = Accounts._loginButtonsSession;\\r\\n\\r\\n  Template._loginButtonsLoggedOutSingleLoginButton.events({\\r\\n    'click .login-button': function () {\\r\\n      var serviceName = this.name;\\r\\n      loginButtonsSession.resetMessages();\\r\\n      var callback = function (err) {\\r\\n        if (!err) {\\r\\n          loginButtonsSession.closeDropdown();\\r\\n        } else if (err instanceof Accounts.LoginCancelledError) {\\r\\n          // do nothing\\r\\n        } else if (err instanceof Accounts.ConfigError) {\\r\\n          loginButtonsSession.configureService(serviceName);\\r\\n        } else {\\r\\n          loginButtonsSession.errorMessage(err.reason || \\\"Unknown error\\\");\\r\\n        }\\r\\n      };\\r\\n\\r\\n      var loginWithService = Meteor[\\\"loginWith\\\" + capitalize(serviceName)];\\r\\n\\r\\n      var options = {}; // use default scope unless specified\\r\\n      if (Accounts.ui._options.requestPermissions[serviceName])\\r\\n        options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\\r\\n\\r\\n      loginWithService(options, callback);\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._loginButtonsLoggedOutSingleLoginButton.configured = function () {\\r\\n    return !!Accounts.loginServiceConfiguration.findOne({service: this.name});\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutSingleLoginButton.capitalizedName = function () {\\r\\n    if (this.name === 'github')\\r\\n      // XXX we should allow service packages to set their capitalized name\\r\\n      return 'GitHub';\\r\\n    else\\r\\n      return capitalize(this.name);\\r\\n  };\\r\\n\\r\\n  // XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\\r\\n  var capitalize = function(str){\\r\\n    str = str == null ? '' : String(str);\\r\\n    return str.charAt(0).toUpperCase() + str.slice(1);\\r\\n  };\\r\\n}) ();\",\"(function () {\\r\\n\\r\\n  // for convenience\\r\\n  var loginButtonsSession = Accounts._loginButtonsSession;\\r\\n\\r\\n  // events shared between loginButtonsLoggedOutDropdown and\\r\\n  // loginButtonsLoggedInDropdown\\r\\n  Template._loginButtons.events({\\r\\n    'click input, click label, click button, click .dropdown-menu, click .alert': function(event) {\\r\\n      event.stopPropagation();\\r\\n    },\\r\\n    'click #login-name-link, click #login-sign-in-link': function () {\\r\\n      event.stopPropagation();\\r\\n      loginButtonsSession.set('dropdownVisible', true);\\r\\n      Meteor.flush();\\r\\n    },\\r\\n    'click .login-close': function () {\\r\\n      loginButtonsSession.closeDropdown();\\r\\n    }\\r\\n  });\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsLoggedInDropdown template and related\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdown.events({\\r\\n    'click #login-buttons-open-change-password': function(event) {\\r\\n      event.stopPropagation();\\r\\n      loginButtonsSession.resetMessages();\\r\\n      loginButtonsSession.set('inChangePasswordFlow', true);\\r\\n      Meteor.flush();\\r\\n      toggleDropdown();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdown.displayName = function () {\\r\\n    return Accounts._loginButtons.displayName();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdown.inChangePasswordFlow = function () {\\r\\n    return loginButtonsSession.get('inChangePasswordFlow');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdown.inMessageOnlyFlow = function () {\\r\\n    return loginButtonsSession.get('inMessageOnlyFlow');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdown.dropdownVisible = function () {\\r\\n    return loginButtonsSession.get('dropdownVisible');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedInDropdownActions.allowChangingPassword = function () {\\r\\n    // it would be more correct to check whether the user has a password set,\\r\\n    // but in order to do that we'd have to send more data down to the client,\\r\\n    // and it'd be preferable not to send down the entire service.password document.\\r\\n    //\\r\\n    // instead we use the heuristic: if the user has a username or email set.\\r\\n    var user = Meteor.user();\\r\\n    return user.username || (user.emails && user.emails[0] && user.emails[0].address);\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsLoggedOutDropdown template and related\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsLoggedOutDropdown.events({\\r\\n    'click #login-buttons-password': function () {\\r\\n      loginOrSignup();\\r\\n    },\\r\\n\\r\\n    'keypress #forgot-password-email': function (event) {\\r\\n      if (event.keyCode === 13)\\r\\n        forgotPassword();\\r\\n    },\\r\\n\\r\\n    'click #login-buttons-forgot-password': function (event) {\\r\\n      event.stopPropagation();\\r\\n      forgotPassword();\\r\\n    },\\r\\n\\r\\n    'click #signup-link': function (event) {\\r\\n      event.stopPropagation();\\r\\n      loginButtonsSession.resetMessages();\\r\\n\\r\\n      // store values of fields before swtiching to the signup form\\r\\n      var username = trimmedElementValueById('login-username');\\r\\n      var email = trimmedElementValueById('login-email');\\r\\n      var usernameOrEmail = trimmedElementValueById('login-username-or-email');\\r\\n      // notably not trimmed. a password could (?) start or end with a space\\r\\n      var password = elementValueById('login-password');\\r\\n\\r\\n      loginButtonsSession.set('inSignupFlow', true);\\r\\n      loginButtonsSession.set('inForgotPasswordFlow', false);\\r\\n\\r\\n      // force the ui to update so that we have the approprate fields to fill in\\r\\n      Meteor.flush();\\r\\n\\r\\n      // update new fields with appropriate defaults\\r\\n      if (username !== null)\\r\\n        document.getElementById('login-username').value = username;\\r\\n      else if (email !== null)\\r\\n        document.getElementById('login-email').value = email;\\r\\n      else if (usernameOrEmail !== null)\\r\\n        if (usernameOrEmail.indexOf('@') === -1)\\r\\n          document.getElementById('login-username').value = usernameOrEmail;\\r\\n      else\\r\\n        document.getElementById('login-email').value = usernameOrEmail;\\r\\n    },\\r\\n    'click #forgot-password-link': function (event) {\\r\\n      event.stopPropagation();\\r\\n      loginButtonsSession.resetMessages();\\r\\n\\r\\n      // store values of fields before swtiching to the signup form\\r\\n      var email = trimmedElementValueById('login-email');\\r\\n      var usernameOrEmail = trimmedElementValueById('login-username-or-email');\\r\\n\\r\\n      loginButtonsSession.set('inSignupFlow', false);\\r\\n      loginButtonsSession.set('inForgotPasswordFlow', true);\\r\\n\\r\\n      // force the ui to update so that we have the approprate fields to fill in\\r\\n      Meteor.flush();\\r\\n      //toggleDropdown();\\r\\n\\r\\n      // update new fields with appropriate defaults\\r\\n      if (email !== null)\\r\\n        document.getElementById('forgot-password-email').value = email;\\r\\n      else if (usernameOrEmail !== null)\\r\\n        if (usernameOrEmail.indexOf('@') !== -1)\\r\\n          document.getElementById('forgot-password-email').value = usernameOrEmail;\\r\\n    },\\r\\n    'click #back-to-login-link': function () {\\r\\n      loginButtonsSession.resetMessages();\\r\\n\\r\\n      var username = trimmedElementValueById('login-username');\\r\\n      var email = trimmedElementValueById('login-email')\\r\\n            || trimmedElementValueById('forgot-password-email'); // Ughh. Standardize on names?\\r\\n\\r\\n      loginButtonsSession.set('inSignupFlow', false);\\r\\n      loginButtonsSession.set('inForgotPasswordFlow', false);\\r\\n\\r\\n      // force the ui to update so that we have the approprate fields to fill in\\r\\n      Meteor.flush();\\r\\n\\r\\n      if (document.getElementById('login-username'))\\r\\n        document.getElementById('login-username').value = username;\\r\\n      if (document.getElementById('login-email'))\\r\\n        document.getElementById('login-email').value = email;\\r\\n      // \\\"login-password\\\" is preserved thanks to the preserve-inputs package\\r\\n      if (document.getElementById('login-username-or-email'))\\r\\n        document.getElementById('login-username-or-email').value = email || username;\\r\\n    },\\r\\n    'keypress #login-username, keypress #login-email, keypress #login-username-or-email, keypress #login-password, keypress #login-password-again': function (event) {\\r\\n      if (event.keyCode === 13)\\r\\n        loginOrSignup();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  // additional classes that can be helpful in styling the dropdown\\r\\n  Template._loginButtonsLoggedOutDropdown.additionalClasses = function () {\\r\\n    if (!Accounts.password) {\\r\\n      return false;\\r\\n    } else {\\r\\n      if (loginButtonsSession.get('inSignupFlow')) {\\r\\n        return 'login-form-create-account';\\r\\n      } else if (loginButtonsSession.get('inForgotPasswordFlow')) {\\r\\n        return 'login-form-forgot-password';\\r\\n      } else {\\r\\n        return 'login-form-sign-in';\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutDropdown.dropdownVisible = function () {\\r\\n    return loginButtonsSession.get('dropdownVisible');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutDropdown.hasPasswordService = function () {\\r\\n    return Accounts._loginButtons.hasPasswordService();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutAllServices.services = function () {\\r\\n    return Accounts._loginButtons.getLoginServices();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutAllServices.isPasswordService = function () {\\r\\n    return this.name === 'password';\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutAllServices.hasOtherServices = function () {\\r\\n    return Accounts._loginButtons.getLoginServices().length > 1;\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutAllServices.hasPasswordService = function () {\\r\\n    return Accounts._loginButtons.hasPasswordService();\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.fields = function () {\\r\\n    var loginFields = [\\r\\n      {fieldName: 'username-or-email', fieldLabel: 'Username or Email',\\r\\n       visible: function () {\\r\\n         return _.contains(\\r\\n           [\\\"USERNAME_AND_EMAIL_CONFIRM\\\", \\\"USERNAME_AND_EMAIL\\\", \\\"USERNAME_AND_OPTIONAL_EMAIL\\\"],\\r\\n           Accounts.ui._passwordSignupFields());\\r\\n       }},\\r\\n      {fieldName: 'username', fieldLabel: 'Username',\\r\\n       visible: function () {\\r\\n         return Accounts.ui._passwordSignupFields() === \\\"USERNAME_ONLY\\\";\\r\\n       }},\\r\\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\\r\\n       visible: function () {\\r\\n         return Accounts.ui._passwordSignupFields() === \\\"EMAIL_ONLY\\\";\\r\\n       }},\\r\\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\\r\\n       visible: function () {\\r\\n         return true;\\r\\n       }}\\r\\n    ];\\r\\n\\r\\n    var signupFields = [\\r\\n      {fieldName: 'username', fieldLabel: 'Username',\\r\\n       visible: function () {\\r\\n         return _.contains(\\r\\n           [\\\"USERNAME_AND_EMAIL_CONFIRM\\\",\\\"USERNAME_AND_EMAIL\\\", \\\"USERNAME_AND_OPTIONAL_EMAIL\\\", \\\"USERNAME_ONLY\\\"],\\r\\n           Accounts.ui._passwordSignupFields());\\r\\n       }},\\r\\n      {fieldName: 'email', fieldLabel: 'Email', inputType: 'email',\\r\\n       visible: function () {\\r\\n         return _.contains(\\r\\n           [\\\"USERNAME_AND_EMAIL_CONFIRM\\\",\\\"USERNAME_AND_EMAIL\\\", \\\"EMAIL_ONLY\\\"],\\r\\n           Accounts.ui._passwordSignupFields());\\r\\n       }},\\r\\n      {fieldName: 'email', fieldLabel: 'Email (optional)', inputType: 'email',\\r\\n       visible: function () {\\r\\n         return Accounts.ui._passwordSignupFields() === \\\"USERNAME_AND_OPTIONAL_EMAIL\\\";\\r\\n       }},\\r\\n      {fieldName: 'password', fieldLabel: 'Password', inputType: 'password',\\r\\n       visible: function () {\\r\\n         return true;\\r\\n       }},\\r\\n      {fieldName: 'password-again', fieldLabel: 'Password (again)',\\r\\n       inputType: 'password',\\r\\n       visible: function () {\\r\\n         // No need to make users double-enter their password if\\r\\n         // they'll necessarily have an email set, since they can use\\r\\n         // the \\\"forgot password\\\" flow.\\r\\n         return _.contains(\\r\\n           [\\\"USERNAME_AND_EMAIL_CONFIRM\\\",\\\"USERNAME_AND_OPTIONAL_EMAIL\\\", \\\"USERNAME_ONLY\\\"],\\r\\n           Accounts.ui._passwordSignupFields());\\r\\n       }}\\r\\n    ];\\r\\n\\r\\n    return loginButtonsSession.get('inSignupFlow') ? signupFields : loginFields;\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.inForgotPasswordFlow = function () {\\r\\n    return loginButtonsSession.get('inForgotPasswordFlow');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.inLoginFlow = function () {\\r\\n    return !loginButtonsSession.get('inSignupFlow') && !loginButtonsSession.get('inForgotPasswordFlow');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.inSignupFlow = function () {\\r\\n    return loginButtonsSession.get('inSignupFlow');\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.showForgotPasswordLink = function () {\\r\\n    return _.contains(\\r\\n      [\\\"USERNAME_AND_EMAIL_CONFIRM\\\",\\\"USERNAME_AND_EMAIL\\\", \\\"USERNAME_AND_OPTIONAL_EMAIL\\\", \\\"EMAIL_ONLY\\\"],\\r\\n      Accounts.ui._passwordSignupFields());\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsLoggedOutPasswordService.showCreateAccountLink = function() {\\r\\n    return !Accounts._options.forbidClientAccountCreation;\\r\\n  };\\r\\n\\r\\n  Template._loginButtonsFormField.inputType = function () {\\r\\n    return this.inputType || \\\"text\\\";\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsChangePassword template\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsChangePassword.events({\\r\\n    'keypress #login-old-password, keypress #login-password, keypress #login-password-again': function (event) {\\r\\n      if (event.keyCode === 13)\\r\\n        changePassword();\\r\\n    },\\r\\n    'click #login-buttons-do-change-password': function (event) {\\r\\n      event.stopPropagation();\\r\\n      changePassword();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._loginButtonsChangePassword.fields = function () {\\r\\n    return [\\r\\n      {fieldName: 'old-password', fieldLabel: 'Current Password', inputType: 'password',\\r\\n       visible: function () {\\r\\n         return true;\\r\\n       }},\\r\\n      {fieldName: 'password', fieldLabel: 'New Password', inputType: 'password',\\r\\n       visible: function () {\\r\\n         return true;\\r\\n       }},\\r\\n      {fieldName: 'password-again', fieldLabel: 'New Password (again)',\\r\\n       inputType: 'password',\\r\\n       visible: function () {\\r\\n         // No need to make users double-enter their password if\\r\\n         // they'll necessarily have an email set, since they can use\\r\\n         // the \\\"forgot password\\\" flow.\\r\\n         return _.contains(\\r\\n           [\\\"USERNAME_AND_OPTIONAL_EMAIL\\\", \\\"USERNAME_ONLY\\\"],\\r\\n           Accounts.ui._passwordSignupFields());\\r\\n       }}\\r\\n    ];\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // helpers\\r\\n  //\\r\\n\\r\\n  var elementValueById = function(id) {\\r\\n    var element = document.getElementById(id);\\r\\n    if (!element)\\r\\n      return null;\\r\\n    else\\r\\n      return element.value;\\r\\n  };\\r\\n\\r\\n  var trimmedElementValueById = function(id) {\\r\\n    var element = document.getElementById(id);\\r\\n    if (!element)\\r\\n      return null;\\r\\n    else\\r\\n      return element.value.replace(/^\\\\s*|\\\\s*$/g, \\\"\\\"); // trim;\\r\\n  };\\r\\n\\r\\n  var loginOrSignup = function () {\\r\\n    if (loginButtonsSession.get('inSignupFlow'))\\r\\n      signup();\\r\\n    else\\r\\n      login();\\r\\n  };\\r\\n\\r\\n  var login = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n\\r\\n    var username = trimmedElementValueById('login-username');\\r\\n    var email = trimmedElementValueById('login-email');\\r\\n    var usernameOrEmail = trimmedElementValueById('login-username-or-email');\\r\\n    // notably not trimmed. a password could (?) start or end with a space\\r\\n    var password = elementValueById('login-password');\\r\\n\\r\\n    var loginSelector;\\r\\n    if (username !== null) {\\r\\n      if (!Accounts._loginButtons.validateUsername(username))\\r\\n        return;\\r\\n      else\\r\\n        loginSelector = {username: username};\\r\\n    } else if (email !== null) {\\r\\n      if (!Accounts._loginButtons.validateEmail(email))\\r\\n        return;\\r\\n      else\\r\\n        loginSelector = {email: email};\\r\\n    } else if (usernameOrEmail !== null) {\\r\\n      // XXX not sure how we should validate this. but this seems good enough (for now),\\r\\n      // since an email must have at least 3 characters anyways\\r\\n      if (!Accounts._loginButtons.validateUsername(usernameOrEmail))\\r\\n        return;\\r\\n      else\\r\\n        loginSelector = usernameOrEmail;\\r\\n    } else {\\r\\n      throw new Error(\\\"Unexpected -- no element to use as a login user selector\\\");\\r\\n    }\\r\\n\\r\\n    Meteor.loginWithPassword(loginSelector, password, function (error, result) {\\r\\n      if (error) {\\r\\n        loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n      } else {\\r\\n        loginButtonsSession.closeDropdown();\\r\\n      }\\r\\n    });\\r\\n  };\\r\\n\\r\\n  var toggleDropdown = function() {\\r\\n    $('#login-dropdown-list .dropdown-menu').dropdown('toggle');\\r\\n  };\\r\\n\\r\\n  var signup = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n\\r\\n    var options = {}; // to be passed to Accounts.createUser\\r\\n\\r\\n    var username = trimmedElementValueById('login-username');\\r\\n    if (username !== null) {\\r\\n      if (!Accounts._loginButtons.validateUsername(username))\\r\\n        return;\\r\\n      else\\r\\n        options.username = username;\\r\\n    }\\r\\n\\r\\n    var email = trimmedElementValueById('login-email');\\r\\n    if (email !== null) {\\r\\n      if (!Accounts._loginButtons.validateEmail(email))\\r\\n        return;\\r\\n      else\\r\\n        options.email = email;\\r\\n    }\\r\\n\\r\\n    // notably not trimmed. a password could (?) start or end with a space\\r\\n    var password = elementValueById('login-password');\\r\\n    if (!Accounts._loginButtons.validatePassword(password))\\r\\n      return;\\r\\n    else\\r\\n      options.password = password;\\r\\n\\r\\n    if (!matchPasswordAgainIfPresent())\\r\\n      return;\\r\\n\\r\\n    Accounts.createUser(options, function (error) {\\r\\n      if (error) {\\r\\n        loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n      } else {\\r\\n        loginButtonsSession.closeDropdown();\\r\\n      }\\r\\n    });\\r\\n  };\\r\\n\\r\\n  var forgotPassword = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n\\r\\n    var email = trimmedElementValueById(\\\"forgot-password-email\\\");\\r\\n    if (email.indexOf('@') !== -1) {\\r\\n      Accounts.forgotPassword({email: email}, function (error) {\\r\\n        if (error)\\r\\n          loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n        else\\r\\n          loginButtonsSession.infoMessage(\\\"Email sent\\\");\\r\\n      });\\r\\n    } else {\\r\\n      loginButtonsSession.infoMessage(\\\"Email sent\\\");\\r\\n    }\\r\\n  };\\r\\n\\r\\n  var changePassword = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n\\r\\n    // notably not trimmed. a password could (?) start or end with a space\\r\\n    var oldPassword = elementValueById('login-old-password');\\r\\n\\r\\n    // notably not trimmed. a password could (?) start or end with a space\\r\\n    var password = elementValueById('login-password');\\r\\n    if (!Accounts._loginButtons.validatePassword(password))\\r\\n      return;\\r\\n\\r\\n    if (!matchPasswordAgainIfPresent())\\r\\n      return;\\r\\n\\r\\n    Accounts.changePassword(oldPassword, password, function (error) {\\r\\n      if (error) {\\r\\n         loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n      } else {\\r\\n        loginButtonsSession.infoMessage(\\\"Password changed\\\");\\r\\n\\r\\n        // wait 3 seconds, then expire the msg\\r\\n        Meteor.setTimeout(function() {\\r\\n          loginButtonsSession.resetMessages();\\r\\n        }, 3000);\\r\\n      }\\r\\n    });\\r\\n  };\\r\\n\\r\\n  var matchPasswordAgainIfPresent = function () {\\r\\n    // notably not trimmed. a password could (?) start or end with a space\\r\\n    var passwordAgain = elementValueById('login-password-again');\\r\\n    if (passwordAgain !== null) {\\r\\n      // notably not trimmed. a password could (?) start or end with a space\\r\\n      var password = elementValueById('login-password');\\r\\n      if (password !== passwordAgain) {\\r\\n        loginButtonsSession.errorMessage(\\\"Passwords don't match\\\");\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n    return true;\\r\\n  };\\r\\n}) ();\\r\\n\",\"(function () {\\r\\n  // for convenience\\r\\n  var loginButtonsSession = Accounts._loginButtonsSession;\\r\\n\\r\\n\\r\\n  //\\r\\n  // populate the session so that the appropriate dialogs are\\r\\n  // displayed by reading variables set by accounts-urls, which parses\\r\\n  // special URLs. since accounts-ui depends on accounts-urls, we are\\r\\n  // guaranteed to have these set at this point.\\r\\n  //\\r\\n\\r\\n  if (Accounts._resetPasswordToken) {\\r\\n    loginButtonsSession.set('resetPasswordToken', Accounts._resetPasswordToken);\\r\\n  }\\r\\n\\r\\n  if (Accounts._enrollAccountToken) {\\r\\n    loginButtonsSession.set('enrollAccountToken', Accounts._enrollAccountToken);\\r\\n  }\\r\\n\\r\\n  // Needs to be in Meteor.startup because of a package loading order\\r\\n  // issue. We can't be sure that accounts-password is loaded earlier\\r\\n  // than accounts-ui so Accounts.verifyEmail might not be defined.\\r\\n  Meteor.startup(function () {\\r\\n    if (Accounts._verifyEmailToken) {\\r\\n      Accounts.verifyEmail(Accounts._verifyEmailToken, function(error) {\\r\\n        Accounts._enableAutoLogin();\\r\\n        if (!error)\\r\\n          loginButtonsSession.set('justVerifiedEmail', true);\\r\\n        // XXX show something if there was an error.\\r\\n      });\\r\\n    }\\r\\n  });\\r\\n\\r\\n\\r\\n  //\\r\\n  // resetPasswordDialog template\\r\\n  //\\r\\n  Template._resetPasswordDialog.rendered = function() {\\r\\n    var $modal = $(this.find('#login-buttons-reset-password-modal'));\\r\\n    $modal.modal();\\r\\n  }\\r\\n\\r\\n  Template._resetPasswordDialog.events({\\r\\n    'click #login-buttons-reset-password-button': function () {\\r\\n      resetPassword();\\r\\n    },\\r\\n    'keypress #reset-password-new-password': function (event) {\\r\\n      if (event.keyCode === 13)\\r\\n        resetPassword();\\r\\n    },\\r\\n    'click #login-buttons-cancel-reset-password': function () {\\r\\n      loginButtonsSession.set('resetPasswordToken', null);\\r\\n      Accounts._enableAutoLogin();\\r\\n      $('#login-buttons-reset-password-modal').modal(\\\"hide\\\");\\r\\n    }\\r\\n  });\\r\\n\\r\\n  var resetPassword = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n    var newPassword = document.getElementById('reset-password-new-password').value;\\r\\n    if (!Accounts._loginButtons.validatePassword(newPassword))\\r\\n      return;\\r\\n\\r\\n    Accounts.resetPassword(\\r\\n      loginButtonsSession.get('resetPasswordToken'), newPassword,\\r\\n      function (error) {\\r\\n        if (error) {\\r\\n          loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n        } else {\\r\\n          loginButtonsSession.set('resetPasswordToken', null);\\r\\n          Accounts._enableAutoLogin();\\r\\n          $('#login-buttons-reset-password-modal').modal(\\\"hide\\\");\\r\\n        }\\r\\n      });\\r\\n  };\\r\\n\\r\\n  Template._resetPasswordDialog.inResetPasswordFlow = function () {\\r\\n    return loginButtonsSession.get('resetPasswordToken');\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // enrollAccountDialog template\\r\\n  //\\r\\n\\r\\n  Template._enrollAccountDialog.events({\\r\\n    'click #login-buttons-enroll-account-button': function () {\\r\\n      enrollAccount();\\r\\n    },\\r\\n    'keypress #enroll-account-password': function (event) {\\r\\n      if (event.keyCode === 13)\\r\\n        enrollAccount();\\r\\n    },\\r\\n    'click #login-buttons-cancel-enroll-account-button': function () {\\r\\n      loginButtonsSession.set('enrollAccountToken', null);\\r\\n      Accounts._enableAutoLogin();\\r\\n      $modal.modal(\\\"hide\\\");\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._enrollAccountDialog.rendered = function() {\\r\\n    $modal = $(this.find('#login-buttons-enroll-account-modal'));\\r\\n    $modal.modal();\\r\\n  };\\r\\n\\r\\n  var enrollAccount = function () {\\r\\n    loginButtonsSession.resetMessages();\\r\\n    var password = document.getElementById('enroll-account-password').value;\\r\\n    if (!Accounts._loginButtons.validatePassword(password))\\r\\n      return;\\r\\n\\r\\n    Accounts.resetPassword(\\r\\n      loginButtonsSession.get('enrollAccountToken'), password,\\r\\n      function (error) {\\r\\n        if (error) {\\r\\n          loginButtonsSession.errorMessage(error.reason || \\\"Unknown error\\\");\\r\\n        } else {\\r\\n          loginButtonsSession.set('enrollAccountToken', null);\\r\\n          Accounts._enableAutoLogin();\\r\\n          $modal.modal(\\\"hide\\\");\\r\\n        }\\r\\n      });\\r\\n  };\\r\\n\\r\\n  Template._enrollAccountDialog.inEnrollAccountFlow = function () {\\r\\n    return loginButtonsSession.get('enrollAccountToken');\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // justVerifiedEmailDialog template\\r\\n  //\\r\\n\\r\\n  Template._justVerifiedEmailDialog.events({\\r\\n    'click #just-verified-dismiss-button': function () {\\r\\n      loginButtonsSession.set('justVerifiedEmail', false);\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._justVerifiedEmailDialog.visible = function () {\\r\\n    return loginButtonsSession.get('justVerifiedEmail');\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // loginButtonsMessagesDialog template\\r\\n  //\\r\\n\\r\\n  Template._loginButtonsMessagesDialog.events({\\r\\n    'click #messages-dialog-dismiss-button': function () {\\r\\n      loginButtonsSession.resetMessages();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  Template._loginButtonsMessagesDialog.visible = function () {\\r\\n    var hasMessage = loginButtonsSession.get('infoMessage') || loginButtonsSession.get('errorMessage');\\r\\n    return !Accounts._loginButtons.dropdown() && hasMessage;\\r\\n  };\\r\\n\\r\\n\\r\\n  //\\r\\n  // configureLoginServiceDialog template\\r\\n  //\\r\\n\\r\\n  Template._configureLoginServiceDialog.events({\\r\\n    'click .configure-login-service-dismiss-button': function () {\\r\\n      loginButtonsSession.set('configureLoginServiceDialogVisible', false);\\r\\n    },\\r\\n    'click #configure-login-service-dialog-save-configuration': function () {\\r\\n      if (loginButtonsSession.get('configureLoginServiceDialogVisible') &&\\r\\n          ! loginButtonsSession.get('configureLoginServiceDialogSaveDisabled')) {\\r\\n        // Prepare the configuration document for this login service\\r\\n        var serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\\r\\n        var configuration = {\\r\\n          service: serviceName\\r\\n        };\\r\\n        _.each(configurationFields(), function(field) {\\r\\n          configuration[field.property] = document.getElementById(\\r\\n            'configure-login-service-dialog-' + field.property).value\\r\\n            .replace(/^\\\\s*|\\\\s*$/g, \\\"\\\"); // trim;\\r\\n        });\\r\\n\\r\\n        // Configure this login service\\r\\n        Meteor.call(\\\"configureLoginService\\\", configuration, function (error, result) {\\r\\n          if (error)\\r\\n            Meteor._debug(\\\"Error configuring login service \\\" + serviceName, error);\\r\\n          else\\r\\n            loginButtonsSession.set('configureLoginServiceDialogVisible', false);\\r\\n        });\\r\\n      }\\r\\n    },\\r\\n    // IE8 doesn't support the 'input' event, so we'll run this on the keyup as\\r\\n    // well. (Keeping the 'input' event means that this also fires when you use\\r\\n    // the mouse to change the contents of the field, eg 'Cut' menu item.)\\r\\n    'input, keyup input': function (event) {\\r\\n      // if the event fired on one of the configuration input fields,\\r\\n      // check whether we should enable the 'save configuration' button\\r\\n      if (event.target.id.indexOf('configure-login-service-dialog') === 0)\\r\\n        updateSaveDisabled();\\r\\n    }\\r\\n  });\\r\\n\\r\\n  // check whether the 'save configuration' button should be enabled.\\r\\n  // this is a really strange way to implement this and a Forms\\r\\n  // Abstraction would make all of this reactive, and simpler.\\r\\n  var updateSaveDisabled = function () {\\r\\n    var anyFieldEmpty = _.any(configurationFields(), function(field) {\\r\\n      return document.getElementById(\\r\\n        'configure-login-service-dialog-' + field.property).value === '';\\r\\n    });\\r\\n\\r\\n    loginButtonsSession.set('configureLoginServiceDialogSaveDisabled', anyFieldEmpty);\\r\\n  };\\r\\n\\r\\n  // Returns the appropriate template for this login service.  This\\r\\n  // template should be defined in the service's package\\r\\n  var configureLoginServiceDialogTemplateForService = function () {\\r\\n    var serviceName = loginButtonsSession.get('configureLoginServiceDialogServiceName');\\r\\n    return Template['configureLoginServiceDialogFor' + capitalize(serviceName)];\\r\\n  };\\r\\n\\r\\n  var configurationFields = function () {\\r\\n    var template = configureLoginServiceDialogTemplateForService();\\r\\n    return template.fields();\\r\\n  };\\r\\n\\r\\n  Template._configureLoginServiceDialog.configurationFields = function () {\\r\\n    return configurationFields();\\r\\n  };\\r\\n\\r\\n  Template._configureLoginServiceDialog.visible = function () {\\r\\n    return loginButtonsSession.get('configureLoginServiceDialogVisible');\\r\\n  };\\r\\n\\r\\n  Template._configureLoginServiceDialog.configurationSteps = function () {\\r\\n    // renders the appropriate template\\r\\n    return configureLoginServiceDialogTemplateForService()();\\r\\n  };\\r\\n\\r\\n  Template._configureLoginServiceDialog.saveDisabled = function () {\\r\\n    return loginButtonsSession.get('configureLoginServiceDialogSaveDisabled');\\r\\n  };\\r\\n\\r\\n\\r\\n  // XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\\r\\n  var capitalize = function(str){\\r\\n    str = str == null ? '' : String(str);\\r\\n    return str.charAt(0).toUpperCase() + str.slice(1);\\r\\n  };\\r\\n\\r\\n}) ();\\r\\n\"]}\n\nC:\\dev\\meteor\\ctm.in.ua\\packages\\accounts-ui-bootstrap-3\\login_buttons.js:\n   16  \n   17    // shared between dropdown and single mode\n   18:   Template._loginButtons.events({\n   19      'click #login-buttons-logout': function() {\n   20        Meteor.logout(function () {\n   ..\n   24    });\n   25  \n   26:   Template._loginButtons.preserve({\n   27      'input[id]': Spark._labelFromIdOrName\n   28    });\n\nC:\\dev\\meteor\\ctm.in.ua\\packages\\accounts-ui-bootstrap-3\\login_buttons_dropdown.js:\n    6    // events shared between loginButtonsLoggedOutDropdown and\n    7    // loginButtonsLoggedInDropdown\n    8:   Template._loginButtons.events({\n    9      'click input, click label, click button, click .dropdown-menu, click .alert': function(event) {\n   10        event.stopPropagation();\n\n9 matches across 4 files\n",
			"settings":
			{
				"buffer_size": 165608,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "packages/accounts-ui-bootstrap-3/login_buttons.js",
			"settings":
			{
				"buffer_size": 4627,
				"line_ending": "Windows"
			}
		},
		{
			"file": "packages/accounts-ui-bootstrap-3/login_buttons_dropdown.js",
			"settings":
			{
				"buffer_size": 16955,
				"line_ending": "Windows"
			}
		},
		{
			"file": "packages/accounts-ui-bootstrap-3/accounts_ui.styl",
			"settings":
			{
				"buffer_size": 857,
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/fixtures.js",
			"settings":
			{
				"buffer_size": 700,
				"line_ending": "Windows"
			}
		},
		{
			"file": "client/views/mainMenu/mainMenu_list.html",
			"settings":
			{
				"buffer_size": 98,
				"line_ending": "Windows"
			}
		},
		{
			"file": "client/views/mainMenu/mainMenu_list.js",
			"settings":
			{
				"buffer_size": 89,
				"line_ending": "Windows"
			}
		},
		{
			"file": "client/views/footer.html",
			"settings":
			{
				"buffer_size": 2241,
				"line_ending": "Windows"
			}
		},
		{
			"file": "router/router.js",
			"settings":
			{
				"buffer_size": 2275,
				"line_ending": "Windows"
			}
		},
		{
			"file": "server/publish.js",
			"settings":
			{
				"buffer_size": 180,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/dev/meteor/ctm.in.ua/packages/accounts-ui-bootstrap-3/accounts_ui.styl",
		"/C/dev/nginx-1.5.5/html/js/tpl/Shell.html",
		"/C/dev/meteor/ctm.in.ua/client/views/notfound/notfound.js",
		"/C/dev/meteor/ctm.in.ua/client/views/notfound/notfound.html",
		"/C/dev/meteor/ctm.in.ua/client/stylesheets/ctm.css",
		"/C/dev/meteor/ctm.in.ua/client/views/home/home.html",
		"/C/dev/meteor/ctm.in.ua/client/views/notfound.html",
		"/C/dev/meteor/ctm.in.ua/client/views/home/home.js",
		"/C/dev/meteor/ctm.in.ua/server/fixtures.js",
		"/C/dev/meteor/ctm.in.ua/client/Shell.html",
		"/C/dev/meteor/ctm.in.ua/client/basic.html",
		"/C/dev/meteor/ctm.in.ua/client/basic.js",
		"/C/dev/meteor/ctm.in.ua/client/views/posts/post_item.js",
		"/C/dev/meteor/ctm.in.ua/client/views/posts/posts_list.html",
		"/C/dev/meteor/ctm.in.ua/server/publish.js",
		"/C/dev/meteor/ctm.in.ua/client/main.js",
		"/C/dev/meteor/ctm.in.ua/client/views/mainMenu/mainMenu_item.html",
		"/C/dev/nginx-1.5.5/html/index.html",
		"/C/dev/meteor/ctm.in.ua/client/helpers/router.js",
		"/C/dev/meteor/ctm.in.ua/client/views/mainMenu/mainMenu_list.html",
		"/C/dev/meteor/ctm.in.ua/client/views/mainMenu/mainMenu_list.js",
		"/C/dev/meteor/ctm.in.ua/collections/cmainmenu.js",
		"/C/dev/meteor/ctm.in.ua/collections/posts.js",
		"/C/dev/meteor/ctm.in.ua/client/stylesheets/style.css",
		"/C/dev/meteor/ctm.in.ua/client/js/tpl/Contact.html",
		"/C/Users/Victor/Documents/INV NVV/IBCMillennium/Объекты строит. собственные/Ахматовой 30/Сидоренко Анатолий Николаевич начальник электрика",
		"/C/dev/nginx-1.5.5/html/css/ctm.css",
		"/C/dev/nginx-1.5.5/html/js/tpl/Home.html",
		"/C/dev/nginx-1.5.5/html/js/tpl/index.my",
		"/C/Users/Victor/Личное/aRiseLabs/Classes/Startup Engineering/ctm.in.ua/index.html",
		"/C/Users/Victor/Личное/aRiseLabs/Classes/Startup Engineering/ctm.in.ua/css/ctm.css",
		"/C/Users/Victor/Личное/aRiseLabs/Classes/Startup Engineering/ctm.in.ua/css/bootstrap.css",
		"/C/Users/Victor/Documents/Ломбард/ОтдСМО/надежные клиенты.csv",
		"/C/Users/Victor/Личное/aRiseLabs/Classes/Startup Engineering/ctm.in.ua/ctm.in.ua.sublime-project",
		"/C/Users/Victor/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"C:\\dev\\meteor\\ctm.in.ua\\packages\\accounts-ui-bootstrap-3"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Template._loginButtons.",
			"Template._loginButtons",
			"id=\"login-buttons\"",
			"medi"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "client/main.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 578,
						"regions":
						{
						},
						"selection":
						[
							[
								577,
								577
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 116.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "client/layout.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1397,
						"regions":
						{
						},
						"selection":
						[
							[
								1206,
								1206
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "client/views/userlogin.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 907,
						"regions":
						{
						},
						"selection":
						[
							[
								485,
								485
							]
						],
						"settings":
						{
							"auto_name": "<template name=\"user_loggedin\">",
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 75.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "client/views/userlogin.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 733,
						"regions":
						{
						},
						"selection":
						[
							[
								639,
								639
							]
						],
						"settings":
						{
							"auto_name": "Template.user_loggedout.events({",
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 131.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "packages/accounts-ui-bootstrap-3/login_buttons.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3054,
						"regions":
						{
						},
						"selection":
						[
							[
								978,
								978
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 60.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 165608,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										458,
										480
									],
									[
										710,
										732
									],
									[
										1175,
										1197
									],
									[
										1811,
										1833
									],
									[
										2447,
										2469
									],
									[
										2951,
										2973
									],
									[
										3455,
										3477
									],
									[
										4091,
										4113
									],
									[
										4727,
										4749
									],
									[
										5231,
										5253
									],
									[
										5867,
										5889
									],
									[
										6371,
										6393
									],
									[
										7007,
										7029
									],
									[
										7641,
										7663
									],
									[
										8274,
										8296
									],
									[
										8778,
										8800
									],
									[
										9412,
										9434
									],
									[
										10046,
										10068
									],
									[
										10682,
										10704
									],
									[
										11186,
										11208
									],
									[
										11690,
										11712
									],
									[
										12194,
										12216
									],
									[
										12698,
										12720
									],
									[
										13334,
										13356
									],
									[
										13972,
										13994
									],
									[
										14613,
										14635
									],
									[
										15121,
										15143
									],
									[
										15629,
										15651
									],
									[
										16137,
										16159
									],
									[
										16645,
										16667
									],
									[
										17153,
										17175
									],
									[
										17661,
										17683
									],
									[
										18302,
										18324
									],
									[
										18810,
										18832
									],
									[
										19318,
										19340
									],
									[
										19826,
										19848
									],
									[
										20467,
										20489
									],
									[
										20975,
										20997
									],
									[
										21616,
										21638
									],
									[
										22257,
										22279
									],
									[
										22898,
										22920
									],
									[
										23539,
										23561
									],
									[
										54643,
										54665
									],
									[
										54745,
										54767
									],
									[
										54858,
										54880
									],
									[
										55066,
										55088
									],
									[
										55221,
										55243
									],
									[
										55344,
										55366
									],
									[
										55475,
										55497
									],
									[
										55798,
										55820
									],
									[
										56081,
										56103
									],
									[
										56203,
										56225
									],
									[
										56396,
										56418
									],
									[
										56528,
										56550
									],
									[
										56724,
										56746
									],
									[
										59581,
										59603
									],
									[
										60619,
										60641
									],
									[
										60794,
										60816
									],
									[
										61537,
										61559
									],
									[
										62116,
										62138
									],
									[
										62457,
										62479
									],
									[
										62593,
										62615
									],
									[
										62749,
										62771
									],
									[
										62899,
										62921
									],
									[
										63045,
										63067
									],
									[
										63694,
										63716
									],
									[
										67817,
										67839
									],
									[
										68280,
										68302
									],
									[
										68427,
										68449
									],
									[
										68578,
										68600
									],
									[
										68720,
										68742
									],
									[
										68854,
										68876
									],
									[
										69015,
										69037
									],
									[
										69169,
										69191
									],
									[
										71748,
										71770
									],
									[
										71912,
										71934
									],
									[
										72112,
										72134
									],
									[
										72260,
										72282
									],
									[
										72551,
										72573
									],
									[
										72714,
										72736
									],
									[
										72899,
										72921
									],
									[
										73292,
										73314
									],
									[
										84745,
										84767
									],
									[
										84926,
										84948
									],
									[
										89399,
										89421
									],
									[
										89507,
										89529
									],
									[
										89634,
										89656
									],
									[
										89798,
										89820
									],
									[
										89929,
										89951
									],
									[
										90068,
										90090
									],
									[
										90215,
										90237
									],
									[
										90419,
										90441
									],
									[
										90662,
										90684
									],
									[
										90800,
										90822
									],
									[
										90962,
										90984
									],
									[
										91110,
										91132
									],
									[
										91274,
										91296
									],
									[
										91516,
										91538
									],
									[
										91714,
										91736
									],
									[
										92157,
										92179
									],
									[
										92369,
										92391
									],
									[
										92565,
										92587
									],
									[
										92717,
										92739
									],
									[
										92889,
										92911
									],
									[
										93055,
										93077
									],
									[
										93217,
										93239
									],
									[
										93507,
										93529
									],
									[
										93742,
										93764
									],
									[
										93915,
										93937
									],
									[
										94078,
										94100
									],
									[
										94245,
										94267
									],
									[
										94403,
										94425
									],
									[
										94553,
										94575
									],
									[
										94730,
										94752
									],
									[
										94900,
										94922
									],
									[
										95115,
										95137
									],
									[
										95295,
										95317
									],
									[
										95511,
										95533
									],
									[
										95675,
										95697
									],
									[
										95937,
										95959
									],
									[
										96116,
										96138
									],
									[
										96265,
										96287
									],
									[
										96506,
										96528
									],
									[
										96848,
										96870
									],
									[
										97032,
										97054
									],
									[
										97223,
										97245
									],
									[
										97876,
										97899
									],
									[
										98512,
										98535
									],
									[
										99146,
										99169
									],
									[
										130460,
										130483
									],
									[
										130668,
										130691
									],
									[
										137139,
										137162
									],
									[
										164942,
										164965
									],
									[
										165106,
										165129
									],
									[
										165405,
										165428
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								165422,
								165422
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 34039.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "packages/accounts-ui-bootstrap-3/login_buttons.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4627,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "packages/accounts-ui-bootstrap-3/login_buttons_dropdown.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16955,
						"regions":
						{
						},
						"selection":
						[
							[
								648,
								648
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 278.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "packages/accounts-ui-bootstrap-3/accounts_ui.styl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 857,
						"regions":
						{
						},
						"selection":
						[
							[
								85,
								85
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "server/fixtures.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 700,
						"regions":
						{
						},
						"selection":
						[
							[
								610,
								610
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "client/views/mainMenu/mainMenu_list.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 98,
						"regions":
						{
						},
						"selection":
						[
							[
								85,
								85
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "client/views/mainMenu/mainMenu_list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 89,
						"regions":
						{
						},
						"selection":
						[
							[
								89,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "client/views/footer.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2241,
						"regions":
						{
						},
						"selection":
						[
							[
								24,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "router/router.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2275,
						"regions":
						{
						},
						"selection":
						[
							[
								247,
								247
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "server/publish.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 180,
						"regions":
						{
						},
						"selection":
						[
							[
								105,
								105
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"project": "meteor_ctm-in-ua.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 235.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
